{"language":"javascript","client_name":"inchjs","args":[],"client_version":"0.4.1","git_repo_url":"git@github.com:victorrseloy/deveryjs.git","branch_name":"master","objects":[{"comment":"","meta":{"range":[68,142],"filename":"AbstractDeverySmartContract.js","lineno":3,"columnno":6,"path":"/devery","code":{"id":"astnode100000007","name":"deveryRegistryArtifact","type":"CallExpression","value":""}},"undocumented":true,"name":"deveryRegistryArtifact","longname":"deveryRegistryArtifact","kind":"constant","scope":"global","params":[]},{"comment":"","meta":{"range":[150,176],"filename":"AbstractDeverySmartContract.js","lineno":4,"columnno":6,"path":"/devery","code":{"id":"astnode100000013","name":"ethers","type":"CallExpression","value":""}},"undocumented":true,"name":"ethers","longname":"ethers","kind":"constant","scope":"global","params":[]},{"comment":"/**\n*\n* Abstract class that is base for all the devery registry related smart contracts.\n* There is no reason to directly instantiate it. Here lies some common logic about how to resolve\n* the underlying smart contract address and getting the signer instance. *** you shall not instantiate it directly***.\n*\n* @version 3\n* @extends AbstractSmartContract\n*/","meta":{"range":[545,2153],"filename":"AbstractDeverySmartContract.js","lineno":16,"columnno":0,"path":"/devery","code":{"id":"astnode100000018","name":"AbstractDeverySmartContract","type":"ClassDeclaration","paramnames":["options"]}},"classdesc":"Abstract class that is base for all the devery registry related smart contracts.\nThere is no reason to directly instantiate it. Here lies some common logic about how to resolve\nthe underlying smart contract address and getting the signer instance. *** you shall not instantiate it directly***.","version":"3","augments":["AbstractSmartContract"],"name":"AbstractDeverySmartContract","longname":"AbstractDeverySmartContract","kind":"class","scope":"global","description":"***You shall not call this class constructor directly*** if you do so you will get a TypeError\nas we are explicitly checking against this.\n\n```\n//excerpt from the constructor\n\nif (new.target === AbstractDeverySmartContract) {\n    throw new TypeError(\"Cannot construct AbstractDeverySmartContract instances directly\");\n}\n```","params":[{"type":{"names":["ClientOptions"]},"name":"options"}]},{"comment":"/**\n*\n* ***You shall not call this class constructor directly*** if you do so you will get a TypeError\n* as we are explicitly checking against this.\n*\n* ```\n* //excerpt from the constructor\n*\n*if (new.target === AbstractDeverySmartContract) {\n*     throw new TypeError(\"Cannot construct AbstractDeverySmartContract instances directly\");\n* }\n* ```\n*\n*\n* @param {ClientOptions} options\n*/","meta":{"range":[1077,2151],"filename":"AbstractDeverySmartContract.js","lineno":33,"columnno":2,"path":"/devery","code":{"id":"astnode100000022","name":"AbstractDeverySmartContract","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"***You shall not call this class constructor directly*** if you do so you will get a TypeError\nas we are explicitly checking against this.\n\n```\n//excerpt from the constructor\n\nif (new.target === AbstractDeverySmartContract) {\n    throw new TypeError(\"Cannot construct AbstractDeverySmartContract instances directly\");\n}\n```","params":[{"type":{"names":["ClientOptions"]},"name":"options"}],"name":"AbstractDeverySmartContract","longname":"AbstractDeverySmartContract","kind":"class","scope":"global","undocumented":true},{"comment":"","meta":{"range":[6,32],"filename":"AbstractSmartContract.js","lineno":1,"columnno":6,"path":"/devery","code":{"id":"astnode100000157","name":"ethers","type":"CallExpression","value":""}},"undocumented":true,"name":"ethers","longname":"ethers","kind":"constant","scope":"global","params":[]},{"comment":"/**\n*\n* Abstract class that is base for all smart contracts.\n* There is no reason to directly instantiate it. Here lies some common logic about how to resolve\n* the underlying smart contract address and getting the signer instance. *** you shall not instantiate it directly***.\n* @version 3\n*/","meta":{"range":[1139,3940],"filename":"AbstractSmartContract.js","lineno":30,"columnno":0,"path":"/devery","code":{"id":"astnode100000162","name":"AbstractSmartContract","type":"ClassDeclaration","paramnames":["options"]}},"classdesc":"Abstract class that is base for all smart contracts.\nThere is no reason to directly instantiate it. Here lies some common logic about how to resolve\nthe underlying smart contract address and getting the signer instance. *** you shall not instantiate it directly***.","version":"3","name":"AbstractSmartContract","longname":"AbstractSmartContract","kind":"class","scope":"global","description":"***You shall not call this class constructor directly*** if you do so you will get a TypeError\nas we are explicitly checking against this.\n\n```\n//excerpt from the constructor\n\nif (new.target === AbstractDeverySmartContract) {\n     throw new TypeError(\"Cannot construct AbstractDeverySmartContract instances directly\");\n}\n\n```","params":[{"type":{"names":["ClientOptions"]},"name":"options"}]},{"comment":"/**\n*\n* ***You shall not call this class constructor directly*** if you do so you will get a TypeError\n* as we are explicitly checking against this.\n*\n* ```\n* //excerpt from the constructor\n*\n* if (new.target === AbstractDeverySmartContract) {\n*      throw new TypeError(\"Cannot construct AbstractDeverySmartContract instances directly\");\n*}\n*\n* ```\n*\n*\n* @param {ClientOptions} options\n*/","meta":{"range":[1643,3406],"filename":"AbstractSmartContract.js","lineno":48,"columnno":2,"path":"/devery","code":{"id":"astnode100000165","name":"AbstractSmartContract","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"***You shall not call this class constructor directly*** if you do so you will get a TypeError\nas we are explicitly checking against this.\n\n```\n//excerpt from the constructor\n\nif (new.target === AbstractDeverySmartContract) {\n     throw new TypeError(\"Cannot construct AbstractDeverySmartContract instances directly\");\n}\n\n```","params":[{"type":{"names":["ClientOptions"]},"name":"options"}],"name":"AbstractSmartContract","longname":"AbstractSmartContract","kind":"class","scope":"global","undocumented":true},{"comment":"/**\n*\n* you can use this method to check the current signer wallet address\n*\n* @returns {*} - the current signer address\n*/","meta":{"range":[3551,3624],"filename":"AbstractSmartContract.js","lineno":105,"columnno":2,"path":"/devery","code":{"id":"astnode100000397","name":"AbstractSmartContract#getSignerAddress","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"you can use this method to check the current signer wallet address","returns":[{"type":{"names":["*"]},"description":"- the current signer address"}],"name":"getSignerAddress","longname":"AbstractSmartContract#getSignerAddress","kind":"function","memberof":"AbstractSmartContract","scope":"instance","params":[]},{"comment":"/**\n* returns the internal signer or provider, this method needs to be used with caution\n* as it exposes internals. So unless you know what you are doing it's better to avoid using it.\n*\n* @returns {*} - the current provider or signer\n*/","meta":{"range":[3883,3938],"filename":"AbstractSmartContract.js","lineno":115,"columnno":2,"path":"/devery","code":{"id":"astnode100000408","name":"AbstractSmartContract#getProvider","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"returns the internal signer or provider, this method needs to be used with caution\nas it exposes internals. So unless you know what you are doing it's better to avoid using it.","returns":[{"type":{"names":["*"]},"description":"- the current provider or signer"}],"name":"getProvider","longname":"AbstractSmartContract#getProvider","kind":"function","memberof":"AbstractSmartContract","scope":"instance","params":[]},{"comment":"/**\n*\n* Main class to deal with contract administration related operations,\n* you can use it to check the current admins and listen to admin related\n* events.\n*\n* @version 2\n* @extends AbstractDeverySmartContract\n*/","meta":{"range":[299,8598],"filename":"DeveryAdmined.js","lineno":13,"columnno":0,"path":"/devery","code":{"id":"astnode100000424","name":"DeveryAdmined","type":"ClassDeclaration","paramnames":["options"]}},"classdesc":"Main class to deal with contract administration related operations,\nyou can use it to check the current admins and listen to admin related\nevents.","version":"2","augments":["AbstractDeverySmartContract"],"name":"DeveryAdmined","longname":"DeveryAdmined","kind":"class","scope":"global","description":"Creates a new DeveryAdmined instance.\n\n***Usage example:***\n```\n//creates a deveryAdminedClient with the default params\nlet deveryAdminedClient = new DeveryAdmined();\n\n//creates a deveryAdminedClient pointing to a custom address\nlet deveryAdminedCustomAddress = new DeveryAdmined({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n\n```","params":[{"type":{"names":["ClientOptions"]},"description":"network connection options","name":"options"}]},{"comment":"/**\n*\n* Creates a new DeveryAdmined instance.\n*\n****Usage example:***\n*```\n* //creates a deveryAdminedClient with the default params\n* let deveryAdminedClient = new DeveryAdmined();\n*\n* //creates a deveryAdminedClient pointing to a custom address\n* let deveryAdminedCustomAddress = new DeveryAdmined({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n*\n* ```\n*\n* @param {ClientOptions} options network connection options\n*\n*/","meta":{"range":[873,1043],"filename":"DeveryAdmined.js","lineno":31,"columnno":2,"path":"/devery","code":{"id":"astnode100000428","name":"DeveryAdmined","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"Creates a new DeveryAdmined instance.\n\n***Usage example:***\n```\n//creates a deveryAdminedClient with the default params\nlet deveryAdminedClient = new DeveryAdmined();\n\n//creates a deveryAdminedClient pointing to a custom address\nlet deveryAdminedCustomAddress = new DeveryAdmined({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n\n```","params":[{"type":{"names":["ClientOptions"]},"description":"network connection options","name":"options"}],"name":"DeveryAdmined","longname":"DeveryAdmined","kind":"class","scope":"global","undocumented":true},{"comment":"/**\n*\n* Checks if a given account is admin of the contract.\n*\n****Usage example:***\n* ```\n* //first you need to get a {@link DeveryAdmined} instance\n* let deveryAdminedClient = new DeveryAdmined();\n* //now you can use it\n* deveryAdminedClient.isAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then( (isAdmin) =>{\n*          if(isAdmin){\n*              //continue your code here ...\n*          }\n* })\n*\n* //if your function is async you can use the await syntax too\n*\n*\n*async function(){\n*      let deveryAdminedClient = new DeveryAdmined();\n*      let isAdmin = await deveryAdminedClient.isAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732');\n*      if(isAdmin){\n*          //continue your code here ...\n*      }\n*}\n*\n* ```\n*\n* for more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}\n*\n*\n* @param addr target account address\n* @returns {Promise.<bool>} A promise that resolves to a bool indicating if the requested account\n* is admin of the contract or an Error if the promise is rejected\n*/","meta":{"range":[2249,2373],"filename":"DeveryAdmined.js","lineno":72,"columnno":2,"path":"/devery","code":{"id":"astnode100000449","name":"DeveryAdmined#isAdmin","type":"MethodDefinition","paramnames":["addr"]},"vars":{"":null}},"description":"Checks if a given account is admin of the contract.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryAdmined} instance\nlet deveryAdminedClient = new DeveryAdmined();\n//now you can use it\ndeveryAdminedClient.isAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then( (isAdmin) =>{\n         if(isAdmin){\n             //continue your code here ...\n         }\n})\n\n//if your function is async you can use the await syntax too\n\n\nasync function(){\n     let deveryAdminedClient = new DeveryAdmined();\n     let isAdmin = await deveryAdminedClient.isAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732');\n     if(isAdmin){\n         //continue your code here ...\n     }\n}\n\n```\n\nfor more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}","params":[{"description":"target account address","name":"addr"}],"returns":[{"type":{"names":["Promise.<bool>"]},"description":"A promise that resolves to a bool indicating if the requested account\nis admin of the contract or an Error if the promise is rejected"}],"name":"isAdmin","longname":"DeveryAdmined#isAdmin","kind":"function","memberof":"DeveryAdmined","scope":"instance","async":true},{"comment":"/**\n* Makes an account admin of the contract by adding it to the admin array.\n*\n* ***One important point to observe\n* is that unless you are the owner of the devery contract (what is a very unlikely condition) you will\n* get an exception and lose you gas if you do a call to this function.***\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryAdmined} instance\n* let deveryAdminedClient = new DeveryAdmined();\n* //now you can use it\n* deveryAdminedClient.addAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then( (transaction) =>{\n*          //continue your code here ...\n* });\n*\n* //if your function is async you can use the await syntax too\n*\n*\n*async function(){\n*      let deveryAdminedClient = new DeveryAdmined();\n*      let transaction = await deveryAdminedClient.addAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732');\n*      //continue your code here ...\n*\n*}\n*\n* ```\n*\n* for more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}\n*\n* @param {string} addr target account address\n* @returns {Promise.<Transaction>} A promise that resolves to a transaction or an Error if the promise is rejected\n*/","meta":{"range":[3708,3834],"filename":"DeveryAdmined.js","lineno":112,"columnno":2,"path":"/devery","code":{"id":"astnode100000470","name":"DeveryAdmined#addAdmin","type":"MethodDefinition","paramnames":["addr"]},"vars":{"":null}},"description":"Makes an account admin of the contract by adding it to the admin array.\n\n***One important point to observe\nis that unless you are the owner of the devery contract (what is a very unlikely condition) you will\nget an exception and lose you gas if you do a call to this function.***\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryAdmined} instance\nlet deveryAdminedClient = new DeveryAdmined();\n//now you can use it\ndeveryAdminedClient.addAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then( (transaction) =>{\n         //continue your code here ...\n});\n\n//if your function is async you can use the await syntax too\n\n\nasync function(){\n     let deveryAdminedClient = new DeveryAdmined();\n     let transaction = await deveryAdminedClient.addAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732');\n     //continue your code here ...\n\n}\n\n```\n\nfor more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}","params":[{"type":{"names":["string"]},"description":"target account address","name":"addr"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"A promise that resolves to a transaction or an Error if the promise is rejected"}],"name":"addAdmin","longname":"DeveryAdmined#addAdmin","kind":"function","memberof":"DeveryAdmined","scope":"instance","async":true},{"comment":"/**\n* Removes admin role from a given account.\n*\n* ***One important point to observe\n* is that unless you are the owner of the devery contract (what is a very unlikely condition) you will\n* get an exception and lose you gas if you do a call to this function.***\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryAdmined} instance\n* let deveryAdminedClient = new DeveryAdmined();\n* //now you can use it\n* deveryAdminedClient.removeAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then( (transaction) =>{\n*          //continue your code here ...\n* })\n*\n* //if your function is async you can use the await syntax too\n*\n*\n*async function(){\n*      let deveryAdminedClient = new DeveryAdmined();\n*      let transaction = await deveryAdminedClient.removeAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732');\n*      //continue your code here ...\n*\n*\n*}\n*\n* for more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}\n*\n* ```\n*\n* @param {string} addr target account address\n* @param {TransactionOptions} [overrideOptions] transaction options like gas price for example\n* @returns {Promise.<Transaction,Error>} A promise that resolves to a transaction or an Error if the promisse is rejected\n*/","meta":{"range":[5249,5420],"filename":"DeveryAdmined.js","lineno":152,"columnno":2,"path":"/devery","code":{"id":"astnode100000491","name":"DeveryAdmined#removeAdmin","type":"MethodDefinition","paramnames":["addr","overrideOptions"]},"vars":{"":null}},"description":"Removes admin role from a given account.\n\n***One important point to observe\nis that unless you are the owner of the devery contract (what is a very unlikely condition) you will\nget an exception and lose you gas if you do a call to this function.***\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryAdmined} instance\nlet deveryAdminedClient = new DeveryAdmined();\n//now you can use it\ndeveryAdminedClient.removeAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then( (transaction) =>{\n         //continue your code here ...\n})\n\n//if your function is async you can use the await syntax too\n\n\nasync function(){\n     let deveryAdminedClient = new DeveryAdmined();\n     let transaction = await deveryAdminedClient.removeAdmin('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732');\n     //continue your code here ...\n\n\n}\n\nfor more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}\n\n```","params":[{"type":{"names":["string"]},"description":"target account address","name":"addr"},{"type":{"names":["TransactionOptions"]},"optional":true,"description":"transaction options like gas price for example","name":"overrideOptions"}],"returns":[{"type":{"names":["Promise.<Transaction, Error>"]},"description":"A promise that resolves to a transaction or an Error if the promisse is rejected"}],"name":"removeAdmin","longname":"DeveryAdmined#removeAdmin","kind":"function","memberof":"DeveryAdmined","scope":"instance","async":true},{"comment":"/**\n*\n* Listener to AdminAdded events, this event triggers whenever a new address is added as admin.\n* Please note that the AdminAddedEventListeners do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove an AdminAddedEventListeners, just call this function passing undefined\n* as param.\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryAdmined} instance\n* let deveryAdminedClient = new DeveryAdmined();\n*\n*  //now you can use it\n* deveryAdminedClient.setAdminAddedEventListener((newAdminAddress) => {\n*      //whenever a new admin is added we will log it to the console\n*      console.log(newAdminAddress);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n* deveryAdminedClient.setAdminAddedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n* deveryAdminedClient.setAdminAddedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}\n*\n* @param {adminEventCallback} callback the callback that will be executed whenever and AdminAdded event is\n* triggered\n*/","meta":{"range":[7046,7147],"filename":"DeveryAdmined.js","lineno":200,"columnno":2,"path":"/devery","code":{"id":"astnode100000516","name":"DeveryAdmined#setAdminAddedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to AdminAdded events, this event triggers whenever a new address is added as admin.\nPlease note that the AdminAddedEventListeners do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove an AdminAddedEventListeners, just call this function passing undefined\nas param.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryAdmined} instance\nlet deveryAdminedClient = new DeveryAdmined();\n\n //now you can use it\ndeveryAdminedClient.setAdminAddedEventListener((newAdminAddress) => {\n     //whenever a new admin is added we will log it to the console\n     console.log(newAdminAddress);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\ndeveryAdminedClient.setAdminAddedEventListener(undefined)\n\n//or that is equivalent to the above call\ndeveryAdminedClient.setAdminAddedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}","params":[{"type":{"names":["adminEventCallback"]},"description":"the callback that will be executed whenever and AdminAdded event is\ntriggered","name":"callback"}],"name":"setAdminAddedEventListener","longname":"DeveryAdmined#setAdminAddedEventListener","kind":"function","memberof":"DeveryAdmined","scope":"instance"},{"comment":"/**\n*\n* Listener to AdminRemoved events, this event triggers whenever a new address is removed from the admin list.\n* please note that the AdminRemovedEventListeners do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove a AdminRemovedEventListener, just call this function passing undefined\n* as param.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryAdmined} instance\n* let deveryAdminedClient = new DeveryAdmined();\n*\n*  //now you can use it\n* deveryAdminedClient.setAdminAddedEventListener((newAdminAddress) => {\n*      //whenever an admin is removed we will log it to the console\n*      console.log(newAdminAddress);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n* deveryAdminedClient.setAdminRemovedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n* deveryAdminedClient.setAdminRemovedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}\n*\n* @param {adminEventCallback} callback the callback that will be executed whenever and AdminRemoved event is\n* triggered\n*/","meta":{"range":[8491,8596],"filename":"DeveryAdmined.js","lineno":237,"columnno":2,"path":"/devery","code":{"id":"astnode100000529","name":"DeveryAdmined#setAdminRemovedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to AdminRemoved events, this event triggers whenever a new address is removed from the admin list.\nplease note that the AdminRemovedEventListeners do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove a AdminRemovedEventListener, just call this function passing undefined\nas param.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryAdmined} instance\nlet deveryAdminedClient = new DeveryAdmined();\n\n //now you can use it\ndeveryAdminedClient.setAdminAddedEventListener((newAdminAddress) => {\n     //whenever an admin is removed we will log it to the console\n     console.log(newAdminAddress);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\ndeveryAdminedClient.setAdminRemovedEventListener(undefined)\n\n//or that is equivalent to the above call\ndeveryAdminedClient.setAdminRemovedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryAdmined|DeveryAdmined instance click here}","params":[{"type":{"names":["adminEventCallback"]},"description":"the callback that will be executed whenever and AdminRemoved event is\ntriggered","name":"callback"}],"name":"setAdminRemovedEventListener","longname":"DeveryAdmined#setAdminRemovedEventListener","kind":"function","memberof":"DeveryAdmined","scope":"instance"},{"comment":"/**\n*\n* Main class to deal with the owned smart contract interface and related operations,\n* you can use it to check the current contract owner and listen to ownership change related\n* events. Take care when you call right functions on this class, because ***unless you are the\n* contract owner you will get an exception and lose your gas.***\n*\n* @version 2\n*\n* @extends AbstractDeverySmartContract\n*/","meta":{"range":[486,8676],"filename":"DeveryOwned.js","lineno":14,"columnno":0,"path":"/devery","code":{"id":"astnode100000550","name":"DeveryOwned","type":"ClassDeclaration","paramnames":["options"]}},"classdesc":"Main class to deal with the owned smart contract interface and related operations,\nyou can use it to check the current contract owner and listen to ownership change related\nevents. Take care when you call right functions on this class, because ***unless you are the\ncontract owner you will get an exception and lose your gas.***","version":"2","augments":["AbstractDeverySmartContract"],"name":"DeveryOwned","longname":"DeveryOwned","kind":"class","scope":"global","description":"Creates a new DeveryOwned instance.\n\n***Usage example:***\n```\n//creates a deverOwnedClient with the default params\nlet deveryOwnedClient = new DeveryOwned();\n\n//creates a deveryAdminedClient pointing to a custom address\nlet deveryOwnedClient = new DeveryOwned({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n\n```","params":[{"type":{"names":["ClientOptions"]},"description":"network connection options","name":"options"}]},{"comment":"/**\n*\n* Creates a new DeveryOwned instance.\n*\n* ***Usage example:***\n*```\n* //creates a deverOwnedClient with the default params\n* let deveryOwnedClient = new DeveryOwned();\n*\n* //creates a deveryAdminedClient pointing to a custom address\n* let deveryOwnedClient = new DeveryOwned({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n*\n* ```\n*\n* @param {ClientOptions} options network connection options\n*\n*/","meta":{"range":[1039,1206],"filename":"DeveryOwned.js","lineno":32,"columnno":2,"path":"/devery","code":{"id":"astnode100000554","name":"DeveryOwned","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"Creates a new DeveryOwned instance.\n\n***Usage example:***\n```\n//creates a deverOwnedClient with the default params\nlet deveryOwnedClient = new DeveryOwned();\n\n//creates a deveryAdminedClient pointing to a custom address\nlet deveryOwnedClient = new DeveryOwned({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n\n```","params":[{"type":{"names":["ClientOptions"]},"description":"network connection options","name":"options"}],"name":"DeveryOwned","longname":"DeveryOwned","kind":"class","scope":"global","undocumented":true},{"comment":"/**\n* If for any reason the current contract owner start an onwnership transfer you can make a call to\n* this method to accept it. ***Beware that if you are are not receiving the contract ownership, you will get an\n* exception and lose your gass.***\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryOwned} instance\n* let deveryOwnedClient = new DeveryOwned();\n*\n* //then you can use it\n* deveryOwnedClient.acceptOwnership().then(function(transaction){\n*      //congrats you are the new owner\n* }).catch(function(err){\n*      //sorry mate I told you not to call this function unless you were about to receive the\n*      //ownership\n* })\n*\n* //optionaly you can can use the async syntax\n*\n*\n* async function(){\n*      try{\n*          let transactionResult = await deveryOwnedClient.acceptOwnership();\n*          //congrats you are the new owner\n*      }\n*      catch(err){\n*          //sorry mate I told you not to call this function unless you were about to receive the\n*          //ownership\n*      }\n* }\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}\n*\n*\n* @returns {Promise.<transaction>} a promise that if resolved returns an transaction or raise an error in case\n* of rejection\n*/","meta":{"range":[2673,2805],"filename":"DeveryOwned.js","lineno":80,"columnno":2,"path":"/devery","code":{"id":"astnode100000576","name":"DeveryOwned#acceptOwnership","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"If for any reason the current contract owner start an onwnership transfer you can make a call to\nthis method to accept it. ***Beware that if you are are not receiving the contract ownership, you will get an\nexception and lose your gass.***\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryOwned} instance\nlet deveryOwnedClient = new DeveryOwned();\n\n//then you can use it\ndeveryOwnedClient.acceptOwnership().then(function(transaction){\n     //congrats you are the new owner\n}).catch(function(err){\n     //sorry mate I told you not to call this function unless you were about to receive the\n     //ownership\n})\n\n//optionaly you can can use the async syntax\n\n\nasync function(){\n     try{\n         let transactionResult = await deveryOwnedClient.acceptOwnership();\n         //congrats you are the new owner\n     }\n     catch(err){\n         //sorry mate I told you not to call this function unless you were about to receive the\n         //ownership\n     }\n}\n\n\n```\n\nfor more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}","returns":[{"type":{"names":["Promise.<transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case\nof rejection"}],"name":"acceptOwnership","longname":"DeveryOwned#acceptOwnership","kind":"function","memberof":"DeveryOwned","scope":"instance","params":[],"async":true},{"comment":"/**\n* If you are the current contract owner(I bet you are not) you c an call this method to transfer it\n* to someone else by passing the new account owner address as param. The ownership transfer will only be\n* concluded once the new contract owner do a call to {@link acceptOwnership}.\n*\n* ***Beware that if you are are not the contract owner you will get an\n* exception and lose your gas***.\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryOwned} instance\n* let deveryOwnedClient = new DeveryOwned();\n*\n* //then you can use it\n* deveryOwnedClient.transferOwnership('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(function(transaction){\n*      //you just started the contract transfer\n* }).catch(function(err){\n*      //sorry mate I told you not to call this function unless you were the contract onwer\n* })\n*\n* //optionaly you can can use the async syntax\n*\n*\n* async function(){\n*      try{\n*          let transactionResult = await deveryOwnedClient.transferOwnership('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732');\n*          //congrats you are the new owner\n*      }\n*      catch(err){\n*          //sorry mate I told you not to call this function unless you were the contract onwer\n*      }\n* }\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}\n*\n* @param {string} newOwnerAddres The new contract owner address\n* @returns {Promise.<transaction>} a promise that if resolved returns an transaction or raise an error in case\n* of rejection\n*/","meta":{"range":[4544,4708],"filename":"DeveryOwned.js","lineno":129,"columnno":2,"path":"/devery","code":{"id":"astnode100000595","name":"DeveryOwned#transferOwnership","type":"MethodDefinition","paramnames":["newOwnerAddres"]},"vars":{"":null}},"description":"If you are the current contract owner(I bet you are not) you c an call this method to transfer it\nto someone else by passing the new account owner address as param. The ownership transfer will only be\nconcluded once the new contract owner do a call to {@link acceptOwnership}.\n\n***Beware that if you are are not the contract owner you will get an\nexception and lose your gas***.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryOwned} instance\nlet deveryOwnedClient = new DeveryOwned();\n\n//then you can use it\ndeveryOwnedClient.transferOwnership('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(function(transaction){\n     //you just started the contract transfer\n}).catch(function(err){\n     //sorry mate I told you not to call this function unless you were the contract onwer\n})\n\n//optionaly you can can use the async syntax\n\n\nasync function(){\n     try{\n         let transactionResult = await deveryOwnedClient.transferOwnership('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732');\n         //congrats you are the new owner\n     }\n     catch(err){\n         //sorry mate I told you not to call this function unless you were the contract onwer\n     }\n}\n\n\n```\n\nfor more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}","params":[{"type":{"names":["string"]},"description":"The new contract owner address","name":"newOwnerAddres"}],"returns":[{"type":{"names":["Promise.<transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case\nof rejection"}],"name":"transferOwnership","longname":"DeveryOwned#transferOwnership","kind":"function","memberof":"DeveryOwned","scope":"instance","async":true},{"comment":"/**\n*\n* Listener to OwnershipTransferred events, this event triggers whenever the smart contract ownership changes\n* please note that OwnershipTransferredEventListeners do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove a OwnershipTransferredEventListeners, just call this function passing undefined\n* as param.\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryOwned} instance\n* let deveryOwnedClient = new DeveryOwned();\n* //now you can use it\n*\n*\n*\n* deveryOwnedClient.setOwnershipTransferredListener((fromAddress,toAddress) => {\n*      //whenever an admin is removed we will log it to the console\n*      console.log(`the ownership is being trasnfered from ${fromAddress} to  ${toAddress}`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* deveryOwnedClient.setOwnershipTransferredListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n* deveryOwnedClient.setOwnershipTransferredListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}\n*\n* @param {OwnershipEventCallback} callback the callback that will be executed whenever and OwnershipTransferred event is\n* triggered\n*/","meta":{"range":[6381,6497],"filename":"DeveryOwned.js","lineno":180,"columnno":2,"path":"/devery","code":{"id":"astnode100000616","name":"DeveryOwned#setOwnershipTransferredListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to OwnershipTransferred events, this event triggers whenever the smart contract ownership changes\nplease note that OwnershipTransferredEventListeners do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove a OwnershipTransferredEventListeners, just call this function passing undefined\nas param.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryOwned} instance\nlet deveryOwnedClient = new DeveryOwned();\n//now you can use it\n\n\n\ndeveryOwnedClient.setOwnershipTransferredListener((fromAddress,toAddress) => {\n     //whenever an admin is removed we will log it to the console\n     console.log(`the ownership is being trasnfered from ${fromAddress} to  ${toAddress}`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\ndeveryOwnedClient.setOwnershipTransferredListener(undefined)\n\n//or that is equivalent to the above call\n\ndeveryOwnedClient.setOwnershipTransferredListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}","params":[{"type":{"names":["OwnershipEventCallback"]},"description":"the callback that will be executed whenever and OwnershipTransferred event is\ntriggered","name":"callback"}],"name":"setOwnershipTransferredListener","longname":"DeveryOwned#setOwnershipTransferredListener","kind":"function","memberof":"DeveryOwned","scope":"instance"},{"comment":"/**\n* Get the current contract owner's address.\n*\n* ***Usage example:***\n*\n* ```\n* //first you need to get a {@link DeveryOwned} instance\n* let deveryOwnedClient = new DeveryOwned();\n*\n* //then you can use it\n* deveryOwnedClient.getOwner().then(function(contractOwnerAddress){\n*      console.log(contractOwnerAddress)\n*      //... do stuff\n* })\n*\n* //optionaly you can can use the async syntax\n*\n*\n* async function(){\n*       let contractOwnerAddress = await getNewOwner.getOwner();\n*       console.log(contractOwnerAddress)\n*       //... do stuff\n* }\n* ```\n*\n*\n* @returns {Promise.<string>} a promise that returns the contract owner address or raise an error in case of rejection\n*\n* for more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}\n*/","meta":{"range":[7421,7536],"filename":"DeveryOwned.js","lineno":214,"columnno":2,"path":"/devery","code":{"id":"astnode100000629","name":"DeveryOwned#getOwner","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Get the current contract owner's address.\n\n***Usage example:***\n\n```\n//first you need to get a {@link DeveryOwned} instance\nlet deveryOwnedClient = new DeveryOwned();\n\n//then you can use it\ndeveryOwnedClient.getOwner().then(function(contractOwnerAddress){\n     console.log(contractOwnerAddress)\n     //... do stuff\n})\n\n//optionaly you can can use the async syntax\n\n\nasync function(){\n      let contractOwnerAddress = await getNewOwner.getOwner();\n      console.log(contractOwnerAddress)\n      //... do stuff\n}\n```","returns":[{"type":{"names":["Promise.<string>"]},"description":"a promise that returns the contract owner address or raise an error in case of rejection\n\nfor more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}"}],"name":"getOwner","longname":"DeveryOwned#getOwner","kind":"function","memberof":"DeveryOwned","scope":"instance","params":[],"async":true},{"comment":"/**\n*\n* Get the address of the newOwner account, an value will be return only if an account transfer is pending\n* otherwise you will get 0x00000000000000...\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryOwned} instance\n* let deveryOwnedClient = new DeveryOwned();\n*\n* //then you can use it\n* deveryOwnedClient.getNewOwner().then(function(newOwnerAddress){\n*      console.log(newOwnerAddress)\n*      //... do stuff\n* })\n*\n* //optionaly you can can use the async syntax\n*\n*\n* async function(){\n*       let newOwnerAddress = await getNewOwner.getNewOwner();\n*       console.log(newOwnerAddress)\n*       //... do stuff\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}\n*\n* @returns {Promise.<string>} a promise that returns the new owner address or raise an error in case of rejection\n*/","meta":{"range":[8553,8674],"filename":"DeveryOwned.js","lineno":250,"columnno":2,"path":"/devery","code":{"id":"astnode100000648","name":"DeveryOwned#getNewOwner","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Get the address of the newOwner account, an value will be return only if an account transfer is pending\notherwise you will get 0x00000000000000...\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryOwned} instance\nlet deveryOwnedClient = new DeveryOwned();\n\n//then you can use it\ndeveryOwnedClient.getNewOwner().then(function(newOwnerAddress){\n     console.log(newOwnerAddress)\n     //... do stuff\n})\n\n//optionaly you can can use the async syntax\n\n\nasync function(){\n      let newOwnerAddress = await getNewOwner.getNewOwner();\n      console.log(newOwnerAddress)\n      //... do stuff\n}\n\n```\n\nfor more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}","returns":[{"type":{"names":["Promise.<string>"]},"description":"a promise that returns the new owner address or raise an error in case of rejection"}],"name":"getNewOwner","longname":"DeveryOwned#getNewOwner","kind":"function","memberof":"DeveryOwned","scope":"instance","params":[],"async":true},{"comment":"/**\n*\n* DeveryRegistry is the main class to interact with the devery registry. With it you have all the tools\n* that you need to create aps, brands and products. You can use it to mark and check your products and to listen and\n* respond to our protocol events.\n*\n*\n*\n*\n* DeveryRegistry Smart Contract Design:\n*\n*\n* ```\n* # Devery Protocol Contracts\n*\n*\n* Mainnet Address: {@link https://etherscan.io/address/0x0364a98148b7031451e79b93449b20090d79702a|0x0364a98148b7031451e79b93449b20090d79702a}\n*\n* ## DeveryRegistry Smart Contract Design ##\n* mapping(appAccount => App[address appAccount, string appName, address feeAccount, uint fee, bool active]) apps`\n* mapping(brandAccount => Brand[address brandAccount, address appAccount, string brandName, bool active]) brands`\n* mapping(productAccount => Product[address productAccount, address brandAccount, string description, string details, uint year, string origin, bool active]) products`\n* mapping(sha3(itemPublicKey) => productAccount) markings`\n* mapping(markerAccount => (brandAccount => permission)) permissions`\n*\n*\n* ## Functions\n*\n* ## App Accounts\n*\n* An account can add itself as an ***App*** account using `addApp(string appName, address feeAccount)`\n* An account can update it's ***App*** account data using `updateApp(string appName, address feeAccount, bool active)`\n*\n*\n*\n* ### Brand Accounts\n*\n* An ***App*** account can add ***Brand*** accounts using `addBrand(address brandAccount, string brandName)`\n* An ***App*** account can update it's ***Brand*** account data using `updateBrand(address brandAccount, string brandName, bool active)`\n*\n*\n*\n* ### Product Accounts\n*\n* A ***Brand*** account can add ***Product*** accounts using `addProduct(address productAccount, string description, string details, uint year, string origin)`\n* A ***Brand*** account can update it's ***Product*** account data using `updateProduct(address productAccount, string description, string details, uint year, string origin, bool active)`\n*\n*\n*\n* ### Permissions\n*\n* A ***Brand*** account can add ***Marker*** accounts using `permissionMarker(address marker, bool permission)`\n*\n*\n*\n* ### Marking\n*\n* A ***Marker*** account can add the hash of an ***Item***'s public key using `mark(address productAccount, bytes32 itemHash)`. The `productAccount` is the\n*type of ***Product*** the ***Item*** is.\n*\n*\n*\n* ## Checking\n*\n* Anyone can check the validity of an ***Item***'s public key using `check(address item)`\n*\n*\n* ```\n* @version 1\n* @extends AbstractDeverySmartContract\n*/","meta":{"range":[2829,64814],"filename":"DeveryRegistry.js","lineno":79,"columnno":0,"path":"/devery","code":{"id":"astnode100000697","name":"DeveryRegistry","type":"ClassDeclaration","paramnames":["options"]}},"classdesc":"DeveryRegistry is the main class to interact with the devery registry. With it you have all the tools\nthat you need to create aps, brands and products. You can use it to mark and check your products and to listen and\nrespond to our protocol events.\n\n\n\n\nDeveryRegistry Smart Contract Design:\n\n\n```\n# Devery Protocol Contracts\n\n\nMainnet Address: {@link https://etherscan.io/address/0x0364a98148b7031451e79b93449b20090d79702a|0x0364a98148b7031451e79b93449b20090d79702a}\n\n## DeveryRegistry Smart Contract Design ##\nmapping(appAccount => App[address appAccount, string appName, address feeAccount, uint fee, bool active]) apps`\nmapping(brandAccount => Brand[address brandAccount, address appAccount, string brandName, bool active]) brands`\nmapping(productAccount => Product[address productAccount, address brandAccount, string description, string details, uint year, string origin, bool active]) products`\nmapping(sha3(itemPublicKey) => productAccount) markings`\nmapping(markerAccount => (brandAccount => permission)) permissions`\n\n\n## Functions\n\n## App Accounts\n\nAn account can add itself as an ***App*** account using `addApp(string appName, address feeAccount)`\nAn account can update it's ***App*** account data using `updateApp(string appName, address feeAccount, bool active)`\n\n\n\n### Brand Accounts\n\nAn ***App*** account can add ***Brand*** accounts using `addBrand(address brandAccount, string brandName)`\nAn ***App*** account can update it's ***Brand*** account data using `updateBrand(address brandAccount, string brandName, bool active)`\n\n\n\n### Product Accounts\n\nA ***Brand*** account can add ***Product*** accounts using `addProduct(address productAccount, string description, string details, uint year, string origin)`\nA ***Brand*** account can update it's ***Product*** account data using `updateProduct(address productAccount, string description, string details, uint year, string origin, bool active)`\n\n\n\n### Permissions\n\nA ***Brand*** account can add ***Marker*** accounts using `permissionMarker(address marker, bool permission)`\n\n\n\n### Marking\n\nA ***Marker*** account can add the hash of an ***Item***'s public key using `mark(address productAccount, bytes32 itemHash)`. The `productAccount` is the\ntype of ***Product*** the ***Item*** is.\n\n\n\n## Checking\n\nAnyone can check the validity of an ***Item***'s public key using `check(address item)`\n\n\n```","version":"1","augments":["AbstractDeverySmartContract"],"name":"DeveryRegistry","longname":"DeveryRegistry","kind":"class","scope":"global","description":"Creates a new DeveryRegistry instance.\n\n***Usage example:***\n```\n//creates a deveryRegistryClient with the default params\nlet deveryRegistryClient = new DeveryAdmined();\n\n//creates a deveryRegistryClient pointing to a custom address\nlet deveryRegistryClient = new DeveryRegistry({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n\n```","params":[{"type":{"names":["ClientOptions"]},"description":"network connection options","name":"options"}]},{"comment":"/**\n*\n* Creates a new DeveryRegistry instance.\n*\n* ***Usage example:***\n*```\n* //creates a deveryRegistryClient with the default params\n* let deveryRegistryClient = new DeveryAdmined();\n*\n* //creates a deveryRegistryClient pointing to a custom address\n* let deveryRegistryClient = new DeveryRegistry({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n*\n* ```\n*\n* @param {ClientOptions} options network connection options\n*\n*/","meta":{"range":[3404,3656],"filename":"DeveryRegistry.js","lineno":97,"columnno":2,"path":"/devery","code":{"id":"astnode100000701","name":"DeveryRegistry","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"Creates a new DeveryRegistry instance.\n\n***Usage example:***\n```\n//creates a deveryRegistryClient with the default params\nlet deveryRegistryClient = new DeveryAdmined();\n\n//creates a deveryRegistryClient pointing to a custom address\nlet deveryRegistryClient = new DeveryRegistry({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n\n```","params":[{"type":{"names":["ClientOptions"]},"description":"network connection options","name":"options"}],"name":"DeveryRegistry","longname":"DeveryRegistry","kind":"class","scope":"global","undocumented":true},{"comment":"/**\n*\n* Creates a new app in the blockchain, each account can have only one account so if your account already\n* have an app you must call {@link updateApp} to change its details. This is a write method so you will need to\n* provide some gas to run it, plus keep in mind that your environment need to have access to an signer so\n* make sure that your user have access to metamask or other web3 object.\n*\n*\n* ***Usage example:***\n*```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n*\n* deveryRegistryClient.addApp(\"Logistics co. app\",\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",5).then(transaction => {\n*      console.log('transaction address',transaction.hash);\n*      //... other stuff\n* }).catch(err => {\n*      if(err.message.indexOf('User denied')){\n*          console.log('The user denied the transaction')\n*          //...\n*      }\n*\n*      ///handle other exceptions here\n*\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          let transaction = await deveryRegistryClient.addApp(\"Logistics co. app\",\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",5)\n*          console.log('transaction address',transaction.hash);\n*      }\n*      catch(err){\n*          if(err.message.indexOf('User denied')){\n*               console.log('The user denied the transaction')\n*              //...\n*          }\n*\n*      ///handle other exceptions here\n*      }\n*\n* }\n*\n* ```\n*\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string}  appName your app name\n* @param {string} feeAccount the account that will pay the fees for this app transactions\n* @param {int} fee the fee amount paid per app transaction\n* @param {TransactionOptions} [overrideOptions] gas options to override the default ones\n* @returns {Promise.<Transaction>} a promise that if resolved returns an transaction or raise an error in case\n* of rejection\n*/","meta":{"range":[7398,7606],"filename":"DeveryRegistry.js","lineno":221,"columnno":2,"path":"/devery","code":{"id":"astnode100000726","name":"DeveryRegistry#addApp","type":"MethodDefinition","paramnames":["appName","feeAccount","fee","overrideOptions"]},"vars":{"":null}},"description":"Creates a new app in the blockchain, each account can have only one account so if your account already\nhave an app you must call {@link updateApp} to change its details. This is a write method so you will need to\nprovide some gas to run it, plus keep in mind that your environment need to have access to an signer so\nmake sure that your user have access to metamask or other web3 object.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n\ndeveryRegistryClient.addApp(\"Logistics co. app\",\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",5).then(transaction => {\n     console.log('transaction address',transaction.hash);\n     //... other stuff\n}).catch(err => {\n     if(err.message.indexOf('User denied')){\n         console.log('The user denied the transaction')\n         //...\n     }\n\n     ///handle other exceptions here\n\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         let transaction = await deveryRegistryClient.addApp(\"Logistics co. app\",\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",5)\n         console.log('transaction address',transaction.hash);\n     }\n     catch(err){\n         if(err.message.indexOf('User denied')){\n              console.log('The user denied the transaction')\n             //...\n         }\n\n     ///handle other exceptions here\n     }\n\n}\n\n```\n\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"your app name","name":"appName"},{"type":{"names":["string"]},"description":"the account that will pay the fees for this app transactions","name":"feeAccount"},{"type":{"names":["int"]},"description":"the fee amount paid per app transaction","name":"fee"},{"type":{"names":["TransactionOptions"]},"optional":true,"description":"gas options to override the default ones","name":"overrideOptions"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case\nof rejection"}],"name":"addApp","longname":"DeveryRegistry#addApp","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Updates an existing app in the blockchain. This is a write method so you will need to\n* provide some gas to run it, plus keep in mind that your environment need to have access to an signer so\n* make sure that your user have access to metamask or other web3 object.\n*\n*\n* ***Usage example:***\n*```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n*\n* deveryRegistryClient.updateApp(\"Logistics co. app\",\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",5,true).then(transaction => {\n*      console.log('transaction address',transaction.hash);\n*      //... other stuff\n* }).catch(err => {\n*      if(err.message.indexOf('User denied')){\n*          console.log('The user denied the transaction')\n*          //...\n*      }\n*\n*      ///handle other exceptions here\n*\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          let transaction = await deveryRegistryClient.updateApp(\"Logistics co. app\",\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",5,true)\n*          console.log('transaction address',transaction.hash);\n*      }\n*      catch(err){\n*          if(err.message.indexOf('User denied')){\n*               console.log('The user denied the transaction')\n*              //...\n*          }\n*\n*      ///handle other exceptions here\n*      }\n*\n* }\n*\n* ```\n*\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string}  appName your app name\n* @param {string} feeAccount the account that will pay the fees for this app transactions\n* @param {int} fee the fee amount paid per app transaction\n* @param {TransactionOptions} overrideOptions gas options to override the default ones\n* @returns {Promise.<Transaction>} a promise that if resolved returns an transaction or raise an error in case\n* of rejection\n*/","meta":{"range":[9741,9961],"filename":"DeveryRegistry.js","lineno":285,"columnno":2,"path":"/devery","code":{"id":"astnode100000755","name":"DeveryRegistry#updateApp","type":"MethodDefinition","paramnames":["appName","feeAccount","fee","active","overrideOptions"]},"vars":{"":null}},"description":"Updates an existing app in the blockchain. This is a write method so you will need to\nprovide some gas to run it, plus keep in mind that your environment need to have access to an signer so\nmake sure that your user have access to metamask or other web3 object.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n\ndeveryRegistryClient.updateApp(\"Logistics co. app\",\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",5,true).then(transaction => {\n     console.log('transaction address',transaction.hash);\n     //... other stuff\n}).catch(err => {\n     if(err.message.indexOf('User denied')){\n         console.log('The user denied the transaction')\n         //...\n     }\n\n     ///handle other exceptions here\n\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         let transaction = await deveryRegistryClient.updateApp(\"Logistics co. app\",\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",5,true)\n         console.log('transaction address',transaction.hash);\n     }\n     catch(err){\n         if(err.message.indexOf('User denied')){\n              console.log('The user denied the transaction')\n             //...\n         }\n\n     ///handle other exceptions here\n     }\n\n}\n\n```\n\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"your app name","name":"appName"},{"type":{"names":["string"]},"description":"the account that will pay the fees for this app transactions","name":"feeAccount"},{"type":{"names":["int"]},"description":"the fee amount paid per app transaction","name":"fee"},{"type":{"names":["TransactionOptions"]},"description":"gas options to override the default ones","name":"overrideOptions"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case\nof rejection"}],"name":"updateApp","longname":"DeveryRegistry#updateApp","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns the app with the given address. If the requested app account does not exist\n* then and empty account is returned.\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(app => {\n*      if(app.active){\n*          console.log(app.appName);\n*          //... other stuff\n*      }\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      let app = await deveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n*      if(app.active){\n*          console.log(app.appName);\n*          //... other stuff\n*      }\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* The returned promise if resolved will return a {@link App|App you can click here to check its fields}\n*\n* @Param {string} appAccount address of the request\n* @returns {Promise.<App>} a promisse that returns an {@link App} if it resolves or an error in case of rejection\n*/","meta":{"range":[11257,11389],"filename":"DeveryRegistry.js","lineno":330,"columnno":2,"path":"/devery","code":{"id":"astnode100000783","name":"DeveryRegistry#getApp","type":"MethodDefinition","paramnames":["appAccount"]},"vars":{"":null}},"description":"Returns the app with the given address. If the requested app account does not exist\nthen and empty account is returned.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(app => {\n     if(app.active){\n         console.log(app.appName);\n         //... other stuff\n     }\n})\n\n\n//or with the async syntax\n\nasync function(){\n     let app = await deveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n     if(app.active){\n         console.log(app.appName);\n         //... other stuff\n     }\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n\nThe returned promise if resolved will return a {@link App|App you can click here to check its fields}","params":[{"type":{"names":["string"]},"description":"address of the request","name":"appAccount"}],"returns":[{"type":{"names":["Promise.<App>"]},"description":"a promisse that returns an {@link App} if it resolves or an error in case of rejection"}],"name":"getApp","longname":"DeveryRegistry#getApp","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns the app data for a  the given address. If the requested app account does not exist\n* then and empty app data is returned.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.getAppData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(app => {\n*      if(app.active){\n*          console.log(app._appAccount);\n*          //... other stuff\n*      }\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      let app = await deveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n*      if(app.active){\n*          console.log(app._appAccount);\n*          //... other stuff\n*      }\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* The returned promise if resolved will return a {@link AppData|AppData you can click here to check its fields}\n*\n* @Param {string} appAccount address of the request\n* @returns {Promise.<AppData>} a promisse that returns an {@link AppData} if it resolves or an error in case of rejection\n*/","meta":{"range":[12714,12856],"filename":"DeveryRegistry.js","lineno":373,"columnno":2,"path":"/devery","code":{"id":"astnode100000804","name":"DeveryRegistry#getAppData","type":"MethodDefinition","paramnames":["appAccount"]},"vars":{"":null}},"description":"Returns the app data for a  the given address. If the requested app account does not exist\nthen and empty app data is returned.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.getAppData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(app => {\n     if(app.active){\n         console.log(app._appAccount);\n         //... other stuff\n     }\n})\n\n\n//or with the async syntax\n\nasync function(){\n     let app = await deveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n     if(app.active){\n         console.log(app._appAccount);\n         //... other stuff\n     }\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n\nThe returned promise if resolved will return a {@link AppData|AppData you can click here to check its fields}","params":[{"type":{"names":["string"]},"description":"address of the request","name":"appAccount"}],"returns":[{"type":{"names":["Promise.<AppData>"]},"description":"a promisse that returns an {@link AppData} if it resolves or an error in case of rejection"}],"name":"getAppData","longname":"DeveryRegistry#getAppData","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns an array of account addresses from the appAccounts array contained in the smart contract.\n* If you try to access a page that does not exist you will get a promisse that resolves to an empty array as result\n* the parameters page and pageSize are optional.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.appAccountsPaginated(0,20).then(addressArr => {\n*     for(let address of addressArr){\n*          console.log(address);\n*     }\n* })\n*\n* //or with the async syntax\n*\n* async function(){\n*\n*      //here we don't pass any param to appAccountsPaginated\n*      //because its parameters are optional\n*      let addressArr = await deveryRegistryClient.appAccountsPaginated();\n*          for(let address of addressArr){\n*              console.log(address);\n*          }\n*\n*          //... do more stuff\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n*\n* @param {int} [page=0] the requested page, this parameter is optional the default value to it is 0\n* @param {int} [pageSize=10] the requested page size, this parameter is optional the default value to it is 10\n* @returns {Promise.<string[]>} a promise that returns an array of app address if it resolves or an error in case of rejection\n*/","meta":{"range":[14443,14772],"filename":"DeveryRegistry.js","lineno":418,"columnno":2,"path":"/devery","code":{"id":"astnode100000825","name":"DeveryRegistry#appAccountsPaginated","type":"MethodDefinition","paramnames":["page","pagesize"]},"vars":{"":null}},"description":"Returns an array of account addresses from the appAccounts array contained in the smart contract.\nIf you try to access a page that does not exist you will get a promisse that resolves to an empty array as result\nthe parameters page and pageSize are optional.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.appAccountsPaginated(0,20).then(addressArr => {\n    for(let address of addressArr){\n         console.log(address);\n    }\n})\n\n//or with the async syntax\n\nasync function(){\n\n     //here we don't pass any param to appAccountsPaginated\n     //because its parameters are optional\n     let addressArr = await deveryRegistryClient.appAccountsPaginated();\n         for(let address of addressArr){\n             console.log(address);\n         }\n\n         //... do more stuff\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["int"]},"optional":true,"defaultvalue":0,"description":"the requested page, this parameter is optional the default value to it is 0","name":"page"},{"type":{"names":["int"]},"optional":true,"defaultvalue":10,"description":"the requested page size, this parameter is optional the default value to it is 10","name":"pageSize"}],"returns":[{"type":{"names":["Promise.<Array.<string>>"]},"description":"a promise that returns an array of app address if it resolves or an error in case of rejection"}],"name":"appAccountsPaginated","longname":"DeveryRegistry#appAccountsPaginated","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns an account address from the appAccounts array. If you try to access an index that is out of the array\n* bounds the promise will be rejected.\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.appAccountsArray(4).then(address => {\n*     deveryClient.getApp(address).then(app => {\n*          console.log(app.appName)\n*          //... do more stuff\n*     })\n* }).catch(err =>{\n*      console.log('index ot of bounds')\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          let accountAddress = await deveryRegistryClient.appAccountsArray(4);\n*          let app = await deveryRegistryClient.getApp(accountAddress);\n*          if(app.active){\n*              console.log(app.appName);\n*              //... other stuff\n*          }\n*\n*      }\n*      catch(err){\n*          console.log('index ot of bounds');\n*      }\n*\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n*\n* @param {int} index the account index inside the appAccounts array\n* @returns {Promise.<string>}  a promisse that returns an account app address if it resolves or an error in case of rejection\n*/","meta":{"range":[16291,16430],"filename":"DeveryRegistry.js","lineno":475,"columnno":2,"path":"/devery","code":{"id":"astnode100000885","name":"DeveryRegistry#appAccountsArray","type":"MethodDefinition","paramnames":["index"]},"vars":{"":null}},"description":"Returns an account address from the appAccounts array. If you try to access an index that is out of the array\nbounds the promise will be rejected.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.appAccountsArray(4).then(address => {\n    deveryClient.getApp(address).then(app => {\n         console.log(app.appName)\n         //... do more stuff\n    })\n}).catch(err =>{\n     console.log('index ot of bounds')\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         let accountAddress = await deveryRegistryClient.appAccountsArray(4);\n         let app = await deveryRegistryClient.getApp(accountAddress);\n         if(app.active){\n             console.log(app.appName);\n             //... other stuff\n         }\n\n     }\n     catch(err){\n         console.log('index ot of bounds');\n     }\n\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["int"]},"description":"the account index inside the appAccounts array","name":"index"}],"returns":[{"type":{"names":["Promise.<string>"]},"description":"a promisse that returns an account app address if it resolves or an error in case of rejection"}],"name":"appAccountsArray","longname":"DeveryRegistry#appAccountsArray","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns the total count of app accounts registered on the smart contract. This method is particulaly usefull\n* to be used in conjunction with {@link appAccountsArray} because you can verify the array upper bounds.\n*\n* ***Usage example:***\n*\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.appAccountsLength().then(totalAccounts => {\n*     for(let i = 0;i< totalAccounts;i++){\n*          deveryRegistryClient.appAccountsArray(i).then(address => {\n*              deveryClient.getApp(address).then(app => {\n*                  console.log(app.appName)\n*                   //... do more stuff\n*              })\n*           })\n*      }\n* })\n*\n* //optionaly you can use the async syntax if you prefer\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n*\n* @returns {Promise.<int>} a promise that returns the total accounts registered in the smart contract if it\n* resolves or an error in case of rejection\n*/","meta":{"range":[17651,17788],"filename":"DeveryRegistry.js","lineno":513,"columnno":2,"path":"/devery","code":{"id":"astnode100000906","name":"DeveryRegistry#appAccountsLength","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Returns the total count of app accounts registered on the smart contract. This method is particulaly usefull\nto be used in conjunction with {@link appAccountsArray} because you can verify the array upper bounds.\n\n***Usage example:***\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.appAccountsLength().then(totalAccounts => {\n    for(let i = 0;i< totalAccounts;i++){\n         deveryRegistryClient.appAccountsArray(i).then(address => {\n             deveryClient.getApp(address).then(app => {\n                 console.log(app.appName)\n                  //... do more stuff\n             })\n          })\n     }\n})\n\n//optionaly you can use the async syntax if you prefer\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","returns":[{"type":{"names":["Promise.<int>"]},"description":"a promise that returns the total accounts registered in the smart contract if it\nresolves or an error in case of rejection"}],"name":"appAccountsLength","longname":"DeveryRegistry#appAccountsLength","kind":"function","memberof":"DeveryRegistry","scope":"instance","params":[],"async":true},{"comment":"/**\n*\n* Listener to AppAdded events, this event triggers whenever a new devery app is created in the blockchain\n* please note that AppAddedEventListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove a AppAddedEventListener, just call this function passing undefined\n* as param.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n* //now you can use it\n*\n*\n*\n* DeveryRegistryClient.setAppAddedEventListener((appAccount,appName,feeAccount,fee,active) => {\n*      //whenever an app created we will log it to the console\n*      console.log(`new app created ${appAccount} - ${appName} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* DeveryRegistryClient.setAppAddedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n* DeveryRegistryClient.setAppAddedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {AppEventCallback} callback the callback that will be executed whenever and OwnershipTransferred event is\n* triggered\n*/","meta":{"range":[19503,19600],"filename":"DeveryRegistry.js","lineno":569,"columnno":2,"path":"/devery","code":{"id":"astnode100000925","name":"DeveryRegistry#setAppAddedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to AppAdded events, this event triggers whenever a new devery app is created in the blockchain\nplease note that AppAddedEventListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove a AppAddedEventListener, just call this function passing undefined\nas param.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n//now you can use it\n\n\n\nDeveryRegistryClient.setAppAddedEventListener((appAccount,appName,feeAccount,fee,active) => {\n     //whenever an app created we will log it to the console\n     console.log(`new app created ${appAccount} - ${appName} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\nDeveryRegistryClient.setAppAddedEventListener(undefined)\n\n//or that is equivalent to the above call\n\nDeveryRegistryClient.setAppAddedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["AppEventCallback"]},"description":"the callback that will be executed whenever and OwnershipTransferred event is\ntriggered","name":"callback"}],"name":"setAppAddedEventListener","longname":"DeveryRegistry#setAppAddedEventListener","kind":"function","memberof":"DeveryRegistry","scope":"instance"},{"comment":"/**\n*\n* Listener to AppUpdated events, this event triggers whenever an existing devery app is updated in the blockchain\n* please note that AppAddedEventListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove a AppAddedEventListener, just call this function passing undefined\n* as param.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n* //now you can use it\n*\n*\n*\n* DeveryRegistryClient.setAppAddedEventListener((appAccount,appName,feeAccount,fee,active) => {\n*      //whenever an app gets updated we will log it to the console\n*      console.log(`an App has been updated ${appAccount} - ${appName} - ${active} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* DeveryRegistryClient.setAppAddedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n* DeveryRegistryClient.setAppAddedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {AppEventCallback} callback the callback that will be executed whenever and OwnershipTransferred event is\n* triggered\n*/","meta":{"range":[21046,21147],"filename":"DeveryRegistry.js","lineno":611,"columnno":2,"path":"/devery","code":{"id":"astnode100000938","name":"DeveryRegistry#setAppUpdatedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to AppUpdated events, this event triggers whenever an existing devery app is updated in the blockchain\nplease note that AppAddedEventListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove a AppAddedEventListener, just call this function passing undefined\nas param.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n//now you can use it\n\n\n\nDeveryRegistryClient.setAppAddedEventListener((appAccount,appName,feeAccount,fee,active) => {\n     //whenever an app gets updated we will log it to the console\n     console.log(`an App has been updated ${appAccount} - ${appName} - ${active} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\nDeveryRegistryClient.setAppAddedEventListener(undefined)\n\n//or that is equivalent to the above call\n\nDeveryRegistryClient.setAppAddedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["AppEventCallback"]},"description":"the callback that will be executed whenever and OwnershipTransferred event is\ntriggered","name":"callback"}],"name":"setAppUpdatedEventListener","longname":"DeveryRegistry#setAppUpdatedEventListener","kind":"function","memberof":"DeveryRegistry","scope":"instance"},{"comment":"/**\n*\n* Creates a new brand in the blockchain. Only one brand can exist per account key so keep in mind that\n* if try to create more than one brand in the same brand account you will get an exception.\n*\n* This is a write method so you will need to\n* provide some gas to run it, plus keep in mind that your environment need to have access to an signer so\n* make sure that your user have access to metamask or other web3 object.\n*\n*\n* ***Usage example:***\n*```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n*\n* deveryRegistryClient.addBrand(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"My Brand name\").then(transaction => {\n*      console.log('transaction address',transaction.hash);\n*      //... other stuff\n* }).catch(err => {\n*      if(err.message.indexOf('User denied')){\n*          console.log('The user denied the transaction')\n*          //...\n*      }\n*\n*      ///handle other exceptions here\n*\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          let transaction = await deveryRegistryClient.addBrand(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"My Brand name\")\n*          console.log('transaction address',transaction.hash);\n*      }\n*      catch(err){\n*          if(err.message.indexOf('User denied')){\n*               console.log('The user denied the transaction')\n*              //...\n*          }\n*\n*      ///handle other exceptions here\n*      }\n*\n* }\n*\n* ```\n*\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string}  brandAccount account address\n* @param {string} brandName the name of the new brand\n* @param {TransactionOptions} overrideOptions gas options to override the default ones\n* @returns {Promise.<Transaction>} a promise that if resolved returns an transaction or raise an error in case\n* of rejection\n*/","meta":{"range":[23423,23633],"filename":"DeveryRegistry.js","lineno":678,"columnno":2,"path":"/devery","code":{"id":"astnode100000951","name":"DeveryRegistry#addBrand","type":"MethodDefinition","paramnames":["brandAccount","brandName","overrideOptions"]},"vars":{"":null}},"description":"Creates a new brand in the blockchain. Only one brand can exist per account key so keep in mind that\nif try to create more than one brand in the same brand account you will get an exception.\n\nThis is a write method so you will need to\nprovide some gas to run it, plus keep in mind that your environment need to have access to an signer so\nmake sure that your user have access to metamask or other web3 object.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n\ndeveryRegistryClient.addBrand(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"My Brand name\").then(transaction => {\n     console.log('transaction address',transaction.hash);\n     //... other stuff\n}).catch(err => {\n     if(err.message.indexOf('User denied')){\n         console.log('The user denied the transaction')\n         //...\n     }\n\n     ///handle other exceptions here\n\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         let transaction = await deveryRegistryClient.addBrand(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"My Brand name\")\n         console.log('transaction address',transaction.hash);\n     }\n     catch(err){\n         if(err.message.indexOf('User denied')){\n              console.log('The user denied the transaction')\n             //...\n         }\n\n     ///handle other exceptions here\n     }\n\n}\n\n```\n\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"account address","name":"brandAccount"},{"type":{"names":["string"]},"description":"the name of the new brand","name":"brandName"},{"type":{"names":["TransactionOptions"]},"description":"gas options to override the default ones","name":"overrideOptions"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case\nof rejection"}],"name":"addBrand","longname":"DeveryRegistry#addBrand","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Updates a existing brand in the blockchain. This is a write method so you will need to\n* provide some gas to run it, plus keep in mind that your environment need to have access to an signer so\n* make sure that your user have access to metamask or other web3 object.\n*\n* ***Usage example:***\n*\n*```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n*\n* deveryRegistryClient.updateBrand(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"My Brand name\",true).then(transaction => {\n*      console.log('transaction address',transaction.hash);\n*      //... other stuff\n* }).catch(err => {\n*      if(err.message.indexOf('User denied')){\n*          console.log('The user denied the transaction')\n*          //...\n*      }\n*\n*      ///handle other exceptions here\n*\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          let transaction = await deveryRegistryClient.updateBrand(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"My Brand name\",true)\n*          console.log('transaction address',transaction.hash);\n*      }\n*      catch(err){\n*          if(err.message.indexOf('User denied')){\n*               console.log('The user denied the transaction')\n*              //...\n*          }\n*\n*      ///handle other exceptions here\n*      }\n*\n* }\n*\n* ```\n*\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string}  brandAccount account address\n* @param {string} brandName the name of the new brand\n* @param {TransactionOptions} overrideOptions gas options to override the default ones\n* @returns {Promise.<Transaction>} a promise that if resolved returns an transaction or raise an error in case\n* of rejection\n*/","meta":{"range":[25667,25899],"filename":"DeveryRegistry.js","lineno":740,"columnno":2,"path":"/devery","code":{"id":"astnode100000978","name":"DeveryRegistry#updateBrand","type":"MethodDefinition","paramnames":["brandAccount","brandName","active","overrideOptions"]},"vars":{"":null}},"description":"Updates a existing brand in the blockchain. This is a write method so you will need to\nprovide some gas to run it, plus keep in mind that your environment need to have access to an signer so\nmake sure that your user have access to metamask or other web3 object.\n\n***Usage example:***\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n\ndeveryRegistryClient.updateBrand(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"My Brand name\",true).then(transaction => {\n     console.log('transaction address',transaction.hash);\n     //... other stuff\n}).catch(err => {\n     if(err.message.indexOf('User denied')){\n         console.log('The user denied the transaction')\n         //...\n     }\n\n     ///handle other exceptions here\n\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         let transaction = await deveryRegistryClient.updateBrand(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"My Brand name\",true)\n         console.log('transaction address',transaction.hash);\n     }\n     catch(err){\n         if(err.message.indexOf('User denied')){\n              console.log('The user denied the transaction')\n             //...\n         }\n\n     ///handle other exceptions here\n     }\n\n}\n\n```\n\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"account address","name":"brandAccount"},{"type":{"names":["string"]},"description":"the name of the new brand","name":"brandName"},{"type":{"names":["TransactionOptions"]},"description":"gas options to override the default ones","name":"overrideOptions"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case\nof rejection"}],"name":"updateBrand","longname":"DeveryRegistry#updateBrand","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns the app with the given address. If the requested app account does not exist\n* then and empty account is returned.\n*\n*\n* ***Usage example:***\n*\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(app => {\n*      if(app.active){\n*          console.log(app.appName);\n*          //... other stuff\n*      }\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      let app = await deveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n*      if(app.active){\n*          console.log(app.appName);\n*          //... other stuff\n*      }\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* The returned promise if resolved will return a {@link Brand|Brand you can click here to check its fields}\n*\n* @Param {string} appAccount address of the request\n* @returns {Promise.<Brand>} a promisse that returns an {@link Brand} if it resolves or an error in case of rejection\n*/","meta":{"range":[27210,27350],"filename":"DeveryRegistry.js","lineno":786,"columnno":2,"path":"/devery","code":{"id":"astnode100001007","name":"DeveryRegistry#getBrand","type":"MethodDefinition","paramnames":["brandAccount"]},"vars":{"":null}},"description":"Returns the app with the given address. If the requested app account does not exist\nthen and empty account is returned.\n\n\n***Usage example:***\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(app => {\n     if(app.active){\n         console.log(app.appName);\n         //... other stuff\n     }\n})\n\n\n//or with the async syntax\n\nasync function(){\n     let app = await deveryRegistryClient.getApp('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n     if(app.active){\n         console.log(app.appName);\n         //... other stuff\n     }\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n\nThe returned promise if resolved will return a {@link Brand|Brand you can click here to check its fields}","params":[{"type":{"names":["string"]},"description":"address of the request","name":"appAccount"}],"returns":[{"type":{"names":["Promise.<Brand>"]},"description":"a promisse that returns an {@link Brand} if it resolves or an error in case of rejection"}],"name":"getBrand","longname":"DeveryRegistry#getBrand","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns the brand data for a  the given address. If the requested Brand account does not exist\n* then and empty data is returned.\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.getBrandData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(brandData => {\n*      console.log(brandData.appFeeAccount);\n*      //... other stuff\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      let brandData = await deveryRegistryClient.getBrandData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n*      console.log(brandData.appFeeAccount);\n*      //... other stuff\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* The returned promise if resolved will return a {@link ProductData|ProductData you can click here to check its fields}\n*\n* @Param {string} brand address of the request\n* @returns {Promise.<BrandData>} a promisse that returns an {@link BrandData} if it resolves or an error in case of rejection\n*/","meta":{"range":[28624,28774],"filename":"DeveryRegistry.js","lineno":825,"columnno":2,"path":"/devery","code":{"id":"astnode100001028","name":"DeveryRegistry#getBrandData","type":"MethodDefinition","paramnames":["brandAccount"]},"vars":{"":null}},"description":"Returns the brand data for a  the given address. If the requested Brand account does not exist\nthen and empty data is returned.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.getBrandData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(brandData => {\n     console.log(brandData.appFeeAccount);\n     //... other stuff\n})\n\n\n//or with the async syntax\n\nasync function(){\n     let brandData = await deveryRegistryClient.getBrandData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n     console.log(brandData.appFeeAccount);\n     //... other stuff\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n\nThe returned promise if resolved will return a {@link ProductData|ProductData you can click here to check its fields}","params":[{"type":{"names":["string"]},"description":"address of the request","name":"brand"}],"returns":[{"type":{"names":["Promise.<BrandData>"]},"description":"a promisse that returns an {@link BrandData} if it resolves or an error in case of rejection"}],"name":"getBrandData","longname":"DeveryRegistry#getBrandData","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns an array of account addresses from the appAccounts array contained in the smart contract.\n* If you try to access a page that does not exist you will get a promisse that resolves to an empty array as result\n* the parameters page and pageSize are optional.\n*\n* ***Usage example:***\n*\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.appAccountsPaginated(0,20).then(addressArr => {\n*     for(let address of addressArr){\n*          console.log(address);\n*     }\n* })\n*\n* //or with the async syntax\n*\n* async function(){\n*\n*      //here we don't pass any param to appAccountsPaginated\n*      //because its parameters are optional\n*      let addressArr = await deveryRegistryClient.appAccountsPaginated();\n*          for(let address of addressArr){\n*              console.log(address);\n*          }\n*\n*          //... do more stuff\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n*\n* @param {int} [page=0] the requested page, this parameter is optional the default value to it is 0\n* @param {int} [pageSize=10] the requested page size, this parameter is optional the default value to it is 10\n* @returns {Promise.<string[]>} a promise that returns an array of app address if it resolves or an error in case of rejection\n*/","meta":{"range":[30368,30703],"filename":"DeveryRegistry.js","lineno":871,"columnno":2,"path":"/devery","code":{"id":"astnode100001049","name":"DeveryRegistry#brandAccountsPaginated","type":"MethodDefinition","paramnames":["page","pagesize"]},"vars":{"":null}},"description":"Returns an array of account addresses from the appAccounts array contained in the smart contract.\nIf you try to access a page that does not exist you will get a promisse that resolves to an empty array as result\nthe parameters page and pageSize are optional.\n\n***Usage example:***\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.appAccountsPaginated(0,20).then(addressArr => {\n    for(let address of addressArr){\n         console.log(address);\n    }\n})\n\n//or with the async syntax\n\nasync function(){\n\n     //here we don't pass any param to appAccountsPaginated\n     //because its parameters are optional\n     let addressArr = await deveryRegistryClient.appAccountsPaginated();\n         for(let address of addressArr){\n             console.log(address);\n         }\n\n         //... do more stuff\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["int"]},"optional":true,"defaultvalue":0,"description":"the requested page, this parameter is optional the default value to it is 0","name":"page"},{"type":{"names":["int"]},"optional":true,"defaultvalue":10,"description":"the requested page size, this parameter is optional the default value to it is 10","name":"pageSize"}],"returns":[{"type":{"names":["Promise.<Array.<string>>"]},"description":"a promise that returns an array of app address if it resolves or an error in case of rejection"}],"name":"brandAccountsPaginated","longname":"DeveryRegistry#brandAccountsPaginated","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns a brand account address from the brandAccounts array. If you try to access an index that is out of the array\n* bounds the promise will be rejected.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.brandAccountsArray(4).then(address => {\n*     deveryClient.getBrand(address).then(brand => {\n*          console.log(brand.brandName)\n*          //... do more stuff\n*     })\n* }).catch(err =>{\n*      console.log('index ot of bounds')\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          let accountAddress = await deveryRegistryClient.brandAccountsArray(4);\n*          let brand = await deveryRegistryClient.getBrand(accountAddress);\n*          console.log(brand.brandName)\n*          //... do more stuff\n*      }\n*      catch(err){\n*          console.log('index ot of bounds');\n*      }\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {int} index the account index inside the appAccounts array\n* @returns {Promise.<string>}  a promisse that returns an brand app address if it resolves or an error in case of rejection\n*/","meta":{"range":[32162,32305],"filename":"DeveryRegistry.js","lineno":922,"columnno":2,"path":"/devery","code":{"id":"astnode100001109","name":"DeveryRegistry#brandAccountsArray","type":"MethodDefinition","paramnames":["index"]},"vars":{"":null}},"description":"Returns a brand account address from the brandAccounts array. If you try to access an index that is out of the array\nbounds the promise will be rejected.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.brandAccountsArray(4).then(address => {\n    deveryClient.getBrand(address).then(brand => {\n         console.log(brand.brandName)\n         //... do more stuff\n    })\n}).catch(err =>{\n     console.log('index ot of bounds')\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         let accountAddress = await deveryRegistryClient.brandAccountsArray(4);\n         let brand = await deveryRegistryClient.getBrand(accountAddress);\n         console.log(brand.brandName)\n         //... do more stuff\n     }\n     catch(err){\n         console.log('index ot of bounds');\n     }\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["int"]},"description":"the account index inside the appAccounts array","name":"index"}],"returns":[{"type":{"names":["Promise.<string>"]},"description":"a promisse that returns an brand app address if it resolves or an error in case of rejection"}],"name":"brandAccountsArray","longname":"DeveryRegistry#brandAccountsArray","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns the total count of brand accounts registered on the smart contract. This method is particulaly usefull\n* to be used in conjunction with {@link brandAccountsArray} because you can verify the array upper bounds.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.brandAccountsLength().then(totalAccounts => {\n*     for(let i = 0;i< totalAccounts;i++){\n*          deveryRegistryClient.brandAccountsArray(i).then(address => {\n*              deveryClient.getBrand(address).then(brand => {\n*                  console.log(brand.brandName)\n*                   //... do more stuff\n*              })\n*           })\n*      }\n* })\n*\n* //optionaly you can use the async syntax if you prefer\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @returns {Promise.<int>} a promise that returns the total brand accounts registered in the smart contract if it\n* resolves or an error in case of rejection\n*/","meta":{"range":[33533,33674],"filename":"DeveryRegistry.js","lineno":957,"columnno":2,"path":"/devery","code":{"id":"astnode100001130","name":"DeveryRegistry#brandAccountsLength","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Returns the total count of brand accounts registered on the smart contract. This method is particulaly usefull\nto be used in conjunction with {@link brandAccountsArray} because you can verify the array upper bounds.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.brandAccountsLength().then(totalAccounts => {\n    for(let i = 0;i< totalAccounts;i++){\n         deveryRegistryClient.brandAccountsArray(i).then(address => {\n             deveryClient.getBrand(address).then(brand => {\n                 console.log(brand.brandName)\n                  //... do more stuff\n             })\n          })\n     }\n})\n\n//optionaly you can use the async syntax if you prefer\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","returns":[{"type":{"names":["Promise.<int>"]},"description":"a promise that returns the total brand accounts registered in the smart contract if it\nresolves or an error in case of rejection"}],"name":"brandAccountsLength","longname":"DeveryRegistry#brandAccountsLength","kind":"function","memberof":"DeveryRegistry","scope":"instance","params":[],"async":true},{"comment":"/**\n*\n* Listener to BrandAdded events, this event triggers whenever a new devery app is created in the blockchain\n* please note that BrandAddedEventListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove am AppAddedEventListener, just call this function passing undefined\n* as param.\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n* //now you can use it\n*\n*\n*\n* DeveryRegistryClient.setBrandAddedEventListener((brandAccount,appAccount,active) => {\n*      //whenever an app created we will log it to the console\n*      console.log(`new brand has been added ${brandAccount} - ${appAccount} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* DeveryRegistryClient.setBrandAddedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n* DeveryRegistryClient.setBrandAddedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {BrandEventCallback} callback the callback that will be executed whenever and BrandAdded event is\n* triggered\n*/","meta":{"range":[35358,35459],"filename":"DeveryRegistry.js","lineno":1013,"columnno":2,"path":"/devery","code":{"id":"astnode100001149","name":"DeveryRegistry#setBrandAddedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to BrandAdded events, this event triggers whenever a new devery app is created in the blockchain\nplease note that BrandAddedEventListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove am AppAddedEventListener, just call this function passing undefined\nas param.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n//now you can use it\n\n\n\nDeveryRegistryClient.setBrandAddedEventListener((brandAccount,appAccount,active) => {\n     //whenever an app created we will log it to the console\n     console.log(`new brand has been added ${brandAccount} - ${appAccount} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\nDeveryRegistryClient.setBrandAddedEventListener(undefined)\n\n//or that is equivalent to the above call\n\nDeveryRegistryClient.setBrandAddedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["BrandEventCallback"]},"description":"the callback that will be executed whenever and BrandAdded event is\ntriggered","name":"callback"}],"name":"setBrandAddedEventListener","longname":"DeveryRegistry#setBrandAddedEventListener","kind":"function","memberof":"DeveryRegistry","scope":"instance"},{"comment":"/**\n*\n* Listener to BrandUpdated events, this event triggers whenever a existing brand is updated in the blockchain\n* please note that BrandUpdatedListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove am BrandUpdatedListener, just call this function passing undefined\n* as param.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n* //now you can use it\n*\n*\n*\n* deveryRegistryClient.setBrandUpdatedEventListener((brandAccount,appAccount,active) => {\n*      //whenever an app created we will log it to the console\n*      console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* deveryRegistryClient.setBrandUpdatedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n* deveryRegistryClient.setBrandUpdatedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {BrandEventCallback} callback the callback that will be executed whenever and BrandAdded event is\n* triggered\n*/","meta":{"range":[36882,36987],"filename":"DeveryRegistry.js","lineno":1054,"columnno":2,"path":"/devery","code":{"id":"astnode100001162","name":"DeveryRegistry#setBrandUpdatedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to BrandUpdated events, this event triggers whenever a existing brand is updated in the blockchain\nplease note that BrandUpdatedListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove am BrandUpdatedListener, just call this function passing undefined\nas param.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n//now you can use it\n\n\n\ndeveryRegistryClient.setBrandUpdatedEventListener((brandAccount,appAccount,active) => {\n     //whenever an app created we will log it to the console\n     console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\ndeveryRegistryClient.setBrandUpdatedEventListener(undefined)\n\n//or that is equivalent to the above call\n\ndeveryRegistryClient.setBrandUpdatedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["BrandEventCallback"]},"description":"the callback that will be executed whenever and BrandAdded event is\ntriggered","name":"callback"}],"name":"setBrandUpdatedEventListener","longname":"DeveryRegistry#setBrandUpdatedEventListener","kind":"function","memberof":"DeveryRegistry","scope":"instance"},{"comment":"/**\n*\n* Creates a new Product in the blockchain.  This is a write method so you will need to\n* provide some gas to run it, plus keep in mind that your environment need to have access to an signer so\n* make sure that your user have access to metamask or other web3 object.\n*\n*\n* ***Usage example:***\n*\n*```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n*\n* deveryRegistryClient.addProduct('0x627306090abaB3A6e1400e9345bC60c78a8BEf57','My nice product','batch 001',2018,'Unknown place').then(transaction => {\n*      console.log('transaction address',transaction.hash);\n*      //... other stuff\n* }).catch(err => {\n*      if(err.message.indexOf('User denied')){\n*          console.log('The user denied the transaction')\n*          //...\n*      }\n*\n*      ///handle other exceptions here\n*\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          let transaction = await deveryRegistryClient.addProduct('0x627306090abaB3A6e1400e9345bC60c78a8BEf57','My nice product','batch 001',2018,'Unknown place')\n*          console.log('transaction address',transaction.hash);\n*      }\n*      catch(err){\n*          if(err.message.indexOf('User denied')){\n*               console.log('The user denied the transaction')\n*              //...\n*          }\n*\n*      ///handle other exceptions here\n*      }\n*\n* }\n*\n* ```\n*\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string} productAccount product account address\n* @param {string} description your product name and description\n* @param {string} details any extra details about your product\n* @param {int} year product production date\n* @param {string} origin information about the product origin\n* @param {TransactionOptions} [overrideOptions] gas options to override the default ones\n* @returns {Promise.<Transaction>} a promise that if resolved returns an transaction or raise an error in case\n* of rejection\n*/","meta":{"range":[39383,39651],"filename":"DeveryRegistry.js","lineno":1122,"columnno":2,"path":"/devery","code":{"id":"astnode100001175","name":"DeveryRegistry#addProduct","type":"MethodDefinition","paramnames":["productAccount","description","details","year","origin","overrideOptions"]},"vars":{"":null}},"description":"Creates a new Product in the blockchain.  This is a write method so you will need to\nprovide some gas to run it, plus keep in mind that your environment need to have access to an signer so\nmake sure that your user have access to metamask or other web3 object.\n\n\n***Usage example:***\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n\ndeveryRegistryClient.addProduct('0x627306090abaB3A6e1400e9345bC60c78a8BEf57','My nice product','batch 001',2018,'Unknown place').then(transaction => {\n     console.log('transaction address',transaction.hash);\n     //... other stuff\n}).catch(err => {\n     if(err.message.indexOf('User denied')){\n         console.log('The user denied the transaction')\n         //...\n     }\n\n     ///handle other exceptions here\n\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         let transaction = await deveryRegistryClient.addProduct('0x627306090abaB3A6e1400e9345bC60c78a8BEf57','My nice product','batch 001',2018,'Unknown place')\n         console.log('transaction address',transaction.hash);\n     }\n     catch(err){\n         if(err.message.indexOf('User denied')){\n              console.log('The user denied the transaction')\n             //...\n         }\n\n     ///handle other exceptions here\n     }\n\n}\n\n```\n\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"product account address","name":"productAccount"},{"type":{"names":["string"]},"description":"your product name and description","name":"description"},{"type":{"names":["string"]},"description":"any extra details about your product","name":"details"},{"type":{"names":["int"]},"description":"product production date","name":"year"},{"type":{"names":["string"]},"description":"information about the product origin","name":"origin"},{"type":{"names":["TransactionOptions"]},"optional":true,"description":"gas options to override the default ones","name":"overrideOptions"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case\nof rejection"}],"name":"addProduct","longname":"DeveryRegistry#addProduct","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Updates a existing brand in the blockchain. This is a write method so you will need to\n* provide some gas to run it, plus keep in mind that your environment need to have access to an signer so\n* make sure that your user have access to metamask or other web3 object.\n*\n* ***Usage example:***\n*```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n*\n* deveryRegistryClient.updateProduct('0x627306090abaB3A6e1400e9345bC60c78a8BEf57','My nice product'\n*      ,'batch 001',2018,'Unknown place',true).then(transaction => {\n*      console.log('transaction address',transaction.hash);\n*      //... other stuff\n* }).catch(err => {\n*      if(err.message.indexOf('User denied')){\n*          console.log('The user denied the transaction')\n*          //...\n*      }\n*\n*      ///handle other exceptions here\n*\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          let transaction = await deveryRegistryClient.updateProduct('0x627306090abaB3A6e1400e9345bC60c78a8BEf57','My nice product'\n*                                                          ,'batch 001',2018,'Unknown place',true)\n*          console.log('transaction address',transaction.hash);\n*      }\n*      catch(err){\n*          if(err.message.indexOf('User denied')){\n*               console.log('The user denied the transaction')\n*              //...\n*          }\n*\n*      ///handle other exceptions here\n*      }\n*\n* }\n*\n* ```\n*\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string}  productAccount product account address\n* @param {string} description your product name and description\n* @param {string} details any extra details about your product\n* @param {int} year product production date\n* @param {string} origin information about the product origin\n* @param {bool} active enables or disable the product\n* @param {TransactionOptions} [overrideOptions] gas options to override the default ones\n* @returns {Promise.<Transaction>} a promise that if resolved returns an transaction or raise an error in case\n* of rejection\n*/","meta":{"range":[42096,42386],"filename":"DeveryRegistry.js","lineno":1190,"columnno":2,"path":"/devery","code":{"id":"astnode100001208","name":"DeveryRegistry#updateProduct","type":"MethodDefinition","paramnames":["productAccount","description","details","year","origin","active","overrideOptions"]},"vars":{"":null}},"description":"Updates a existing brand in the blockchain. This is a write method so you will need to\nprovide some gas to run it, plus keep in mind that your environment need to have access to an signer so\nmake sure that your user have access to metamask or other web3 object.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n\ndeveryRegistryClient.updateProduct('0x627306090abaB3A6e1400e9345bC60c78a8BEf57','My nice product'\n     ,'batch 001',2018,'Unknown place',true).then(transaction => {\n     console.log('transaction address',transaction.hash);\n     //... other stuff\n}).catch(err => {\n     if(err.message.indexOf('User denied')){\n         console.log('The user denied the transaction')\n         //...\n     }\n\n     ///handle other exceptions here\n\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         let transaction = await deveryRegistryClient.updateProduct('0x627306090abaB3A6e1400e9345bC60c78a8BEf57','My nice product'\n                                                         ,'batch 001',2018,'Unknown place',true)\n         console.log('transaction address',transaction.hash);\n     }\n     catch(err){\n         if(err.message.indexOf('User denied')){\n              console.log('The user denied the transaction')\n             //...\n         }\n\n     ///handle other exceptions here\n     }\n\n}\n\n```\n\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"product account address","name":"productAccount"},{"type":{"names":["string"]},"description":"your product name and description","name":"description"},{"type":{"names":["string"]},"description":"any extra details about your product","name":"details"},{"type":{"names":["int"]},"description":"product production date","name":"year"},{"type":{"names":["string"]},"description":"information about the product origin","name":"origin"},{"type":{"names":["bool"]},"description":"enables or disable the product","name":"active"},{"type":{"names":["TransactionOptions"]},"optional":true,"description":"gas options to override the default ones","name":"overrideOptions"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case\nof rejection"}],"name":"updateProduct","longname":"DeveryRegistry#updateProduct","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns the Product with the given address. If the requested Product account does not exist\n* then you will receive an object with default data.\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.getProduct('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(product => {\n*      if(product.active){\n*          console.log(product.details);\n*          //... other stuff\n*      }\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      let product = await deveryRegistryClient.getProduct('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n*      if(product.active){\n*          console.log(product.details);\n*          //... other stuff\n*      }\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* The returned promise if resolved will return a {@link App|App you can click here to check its fields}\n*\n* @Param {string} appAccount address of the request\n* @returns {Promise.<Product>} a promisse that returns an {@link Product} if it resolves or an error in case of rejection\n*/","meta":{"range":[43744,43892],"filename":"DeveryRegistry.js","lineno":1234,"columnno":2,"path":"/devery","code":{"id":"astnode100001243","name":"DeveryRegistry#getProduct","type":"MethodDefinition","paramnames":["productAccount"]},"vars":{"":null}},"description":"Returns the Product with the given address. If the requested Product account does not exist\nthen you will receive an object with default data.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.getProduct('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(product => {\n     if(product.active){\n         console.log(product.details);\n         //... other stuff\n     }\n})\n\n\n//or with the async syntax\n\nasync function(){\n     let product = await deveryRegistryClient.getProduct('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n     if(product.active){\n         console.log(product.details);\n         //... other stuff\n     }\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n\nThe returned promise if resolved will return a {@link App|App you can click here to check its fields}","params":[{"type":{"names":["string"]},"description":"address of the request","name":"appAccount"}],"returns":[{"type":{"names":["Promise.<Product>"]},"description":"a promisse that returns an {@link Product} if it resolves or an error in case of rejection"}],"name":"getProduct","longname":"DeveryRegistry#getProduct","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns the Product data for a  the given address. If the requested Product account does not exist\n* then and empty data is returned.\n*\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.getProductData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(productData => {\n*      console.log(productData.brandAccount);\n*      //... other stuff\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      let productData = await deveryRegistryClient.getProductData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n*      console.log(productData.brandAccount);\n*      //... other stuff\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* The returned promise if resolved will return a {@link ProductData|ProductData you can click here to check its fields}\n*\n* @Param {string} appAccount address of the request\n* @returns {Promise.<ProductData>} a promisse that returns an {@link ProductData} if it resolves or an error in case of rejection\n*/","meta":{"range":[45190,45348],"filename":"DeveryRegistry.js","lineno":1274,"columnno":2,"path":"/devery","code":{"id":"astnode100001264","name":"DeveryRegistry#getProductData","type":"MethodDefinition","paramnames":["productAccount"]},"vars":{"":null}},"description":"Returns the Product data for a  the given address. If the requested Product account does not exist\nthen and empty data is returned.\n\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.getProductData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732').then(productData => {\n     console.log(productData.brandAccount);\n     //... other stuff\n})\n\n\n//or with the async syntax\n\nasync function(){\n     let productData = await deveryRegistryClient.getProductData('0xf17f52151EbEF6C7334FAD080c5704DAAA16b732')\n     console.log(productData.brandAccount);\n     //... other stuff\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n\nThe returned promise if resolved will return a {@link ProductData|ProductData you can click here to check its fields}","params":[{"type":{"names":["string"]},"description":"address of the request","name":"appAccount"}],"returns":[{"type":{"names":["Promise.<ProductData>"]},"description":"a promisse that returns an {@link ProductData} if it resolves or an error in case of rejection"}],"name":"getProductData","longname":"DeveryRegistry#getProductData","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* returns an array of product addresses from the productAccounts array contained in the smart contract.\n* If you try to access a page that does not exist you will get a promisse that resolves to an empty array as result\n* the parameters page and pageSize are optional.\n*\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.productAccountsPaginated(0,20).then(addressArr => {\n*     for(let address of addressArr){\n*          console.log(address);\n*     }\n* })\n*\n* //or with the async syntax\n*\n* async function(){\n*\n*      //here we don't pass any param to productAccountsPaginated\n*      //because its parameters are optional\n*      let addressArr = await productAccountsPaginated.productAccountsPaginated();\n*          for(let address of addressArr){\n*              console.log(address);\n*          }\n*\n*          //... do more stuff\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n*\n* @param {int} page the requested page, this parameter is optional the default value to it is 0\n* @param {int} pageSize the requested page size, this parameter is optional the default value to it is 10\n* @returns {Promise.<string[]>} a promise that returns an array of product address if it resolves or an error in case of rejection\n*/","meta":{"range":[46922,47263],"filename":"DeveryRegistry.js","lineno":1318,"columnno":2,"path":"/devery","code":{"id":"astnode100001285","name":"DeveryRegistry#productAccountsPaginated","type":"MethodDefinition","paramnames":["page","pagesize"]},"vars":{"":null}},"description":"returns an array of product addresses from the productAccounts array contained in the smart contract.\nIf you try to access a page that does not exist you will get a promisse that resolves to an empty array as result\nthe parameters page and pageSize are optional.\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.productAccountsPaginated(0,20).then(addressArr => {\n    for(let address of addressArr){\n         console.log(address);\n    }\n})\n\n//or with the async syntax\n\nasync function(){\n\n     //here we don't pass any param to productAccountsPaginated\n     //because its parameters are optional\n     let addressArr = await productAccountsPaginated.productAccountsPaginated();\n         for(let address of addressArr){\n             console.log(address);\n         }\n\n         //... do more stuff\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["int"]},"description":"the requested page, this parameter is optional the default value to it is 0","name":"page","defaultvalue":0},{"type":{"names":["int"]},"description":"the requested page size, this parameter is optional the default value to it is 10","name":"pageSize"}],"returns":[{"type":{"names":["Promise.<Array.<string>>"]},"description":"a promise that returns an array of product address if it resolves or an error in case of rejection"}],"name":"productAccountsPaginated","longname":"DeveryRegistry#productAccountsPaginated","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Returns an brand account address from the brandAccounts array. If you try to access an index that is out of the array\n* bounds the promise will be rejected.\n*\n*\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.productAccountsArray(4).then(address => {\n*     deveryClient.getProduct(address).then(product => {\n*          console.log(product.productDescription)\n*          //... do more stuff\n*     })\n* }).catch(err =>{\n*      console.log('index ot of bounds')\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          let productAddress = await deveryRegistryClient.productAccountsArray(4);\n*          let product = await deveryRegistryClient.getProduct(productAddress);\n*          console.log(product.productDescription)\n*          //... do more stuff\n*      }\n*      catch(err){\n*          console.log('index ot of bounds');\n*      }\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {int} index the account index inside the appAccounts array\n* @returns {Promise.<string>}  a promisse that returns an product address array if it resolves or an error in case of rejection\n*/","meta":{"range":[48741,48888],"filename":"DeveryRegistry.js","lineno":1370,"columnno":2,"path":"/devery","code":{"id":"astnode100001345","name":"DeveryRegistry#productAccountsArray","type":"MethodDefinition","paramnames":["index"]},"vars":{"":null}},"description":"Returns an brand account address from the brandAccounts array. If you try to access an index that is out of the array\nbounds the promise will be rejected.\n\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.productAccountsArray(4).then(address => {\n    deveryClient.getProduct(address).then(product => {\n         console.log(product.productDescription)\n         //... do more stuff\n    })\n}).catch(err =>{\n     console.log('index ot of bounds')\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         let productAddress = await deveryRegistryClient.productAccountsArray(4);\n         let product = await deveryRegistryClient.getProduct(productAddress);\n         console.log(product.productDescription)\n         //... do more stuff\n     }\n     catch(err){\n         console.log('index ot of bounds');\n     }\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["int"]},"description":"the account index inside the appAccounts array","name":"index"}],"returns":[{"type":{"names":["Promise.<string>"]},"description":"a promisse that returns an product address array if it resolves or an error in case of rejection"}],"name":"productAccountsArray","longname":"DeveryRegistry#productAccountsArray","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* returns the total count of brand accounts registered on the smart contract. This method is particulaly usefull\n* to be used in conjunction with {@link brandAccountsArray} because you can verify the array upper bounds\n*\n*\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* deveryRegistryClient.productAccountsLength().then(totalProducts => {\n*     for(let i = 0;i< totalProducts;i++){\n*          deveryRegistryClient.productAccountsArray(i).then(address => {\n*              deveryClient.getProduct(address).then(brand => {\n*                  console.log(brand.productDescription)\n*                   //... do more stuff\n*              })\n*           })\n*      }\n* })\n*\n* //optionaly you can use the async syntax if you prefer\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n*\n* @param {int} page the requested page, this parameter is optional the default value to it is 0\n* @param {int} pageSize the requested page size, this parameter is optional the default value to it is 10\n* @returns {Promise.<int>} a promise that returns the total product accounts registered in the smart contract if it\n* resolves or an error in case of rejection\n*/","meta":{"range":[50331,50476],"filename":"DeveryRegistry.js","lineno":1409,"columnno":2,"path":"/devery","code":{"id":"astnode100001366","name":"DeveryRegistry#productAccountsLength","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"returns the total count of brand accounts registered on the smart contract. This method is particulaly usefull\nto be used in conjunction with {@link brandAccountsArray} because you can verify the array upper bounds\n\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\ndeveryRegistryClient.productAccountsLength().then(totalProducts => {\n    for(let i = 0;i< totalProducts;i++){\n         deveryRegistryClient.productAccountsArray(i).then(address => {\n             deveryClient.getProduct(address).then(brand => {\n                 console.log(brand.productDescription)\n                  //... do more stuff\n             })\n          })\n     }\n})\n\n//optionaly you can use the async syntax if you prefer\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["int"]},"description":"the requested page, this parameter is optional the default value to it is 0","name":"page"},{"type":{"names":["int"]},"description":"the requested page size, this parameter is optional the default value to it is 10","name":"pageSize"}],"returns":[{"type":{"names":["Promise.<int>"]},"description":"a promise that returns the total product accounts registered in the smart contract if it\nresolves or an error in case of rejection"}],"name":"productAccountsLength","longname":"DeveryRegistry#productAccountsLength","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Listener to productAdded events, this event triggers whenever a new product  is created in the blockchain\n* please note that ProductAddedEventListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove am ProductAddedEventListener, just call this function passing undefined\n* as param.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n* //now you can use it\n*\n*\n*\n* deveryRegistryClient.setProductUpdatedEventListener((brandAccount,appAccount,active) => {\n*      //whenever an app created we will log it to the console\n*      console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* deveryRegistryClient.setProductAddedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n*\n*\n* deveryRegistryClient.setProductAddedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {ProductEventCallback} callback the callback that will be executed whenever and ProductAdded event is\n* triggered\n*/","meta":{"range":[52261,52366],"filename":"DeveryRegistry.js","lineno":1468,"columnno":2,"path":"/devery","code":{"id":"astnode100001385","name":"DeveryRegistry#setProductAddedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to productAdded events, this event triggers whenever a new product  is created in the blockchain\nplease note that ProductAddedEventListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove am ProductAddedEventListener, just call this function passing undefined\nas param.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n//now you can use it\n\n\n\ndeveryRegistryClient.setProductUpdatedEventListener((brandAccount,appAccount,active) => {\n     //whenever an app created we will log it to the console\n     console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\ndeveryRegistryClient.setProductAddedEventListener(undefined)\n\n//or that is equivalent to the above call\n\n\n\ndeveryRegistryClient.setProductAddedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["ProductEventCallback"]},"description":"the callback that will be executed whenever and ProductAdded event is\ntriggered","name":"callback"}],"name":"setProductAddedEventListener","longname":"DeveryRegistry#setProductAddedEventListener","kind":"function","memberof":"DeveryRegistry","scope":"instance"},{"comment":"/**\n*\n* Listener to productUpdated events, this event triggers whenever a new devery app is created in the blockchain\n* please note that ProductUpdatedEventListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove am AppAddedEventListener, just call this function passing undefined\n* as param.\n*\n* ***Usage example:***\n*\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n* //now you can use it\n*\n*\n*\n* deveryRegistryClient.setProductUpdatedEventListener((brandAccount,appAccount,active) => {\n*      //whenever an app created we will log it to the console\n*      console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* deveryRegistryClient.setProductUpdatedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n*\n*\n* deveryRegistryClient.setProductUpdatedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {ProductEventCallback} callback the callback that will be executed whenever and ProductUpdated event is\n* triggered\n*/","meta":{"range":[53833,53942],"filename":"DeveryRegistry.js","lineno":1513,"columnno":2,"path":"/devery","code":{"id":"astnode100001398","name":"DeveryRegistry#setProductUpdatedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to productUpdated events, this event triggers whenever a new devery app is created in the blockchain\nplease note that ProductUpdatedEventListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove am AppAddedEventListener, just call this function passing undefined\nas param.\n\n***Usage example:***\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n//now you can use it\n\n\n\ndeveryRegistryClient.setProductUpdatedEventListener((brandAccount,appAccount,active) => {\n     //whenever an app created we will log it to the console\n     console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\ndeveryRegistryClient.setProductUpdatedEventListener(undefined)\n\n//or that is equivalent to the above call\n\n\n\ndeveryRegistryClient.setProductUpdatedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["ProductEventCallback"]},"description":"the callback that will be executed whenever and ProductUpdated event is\ntriggered","name":"callback"}],"name":"setProductUpdatedEventListener","longname":"DeveryRegistry#setProductUpdatedEventListener","kind":"function","memberof":"DeveryRegistry","scope":"instance"},{"comment":"/**\n*\n* Adds or removes permission from an account to mark items in the blockchain.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* //passing true as param will add the account as marker\n* deveryRegistryClient.permissionMarker(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",true).then(transaction => {\n*      console.log('transaction address',transaction.hash);\n*      //... other stuff\n* }).catch(err => {\n*      if(err.message.indexOf('User denied')){\n*          console.log('The user denied the transaction')\n*          //...\n*      }\n*\n*      ///handle other exceptions here\n*\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          //passing false as param will remove the account as marker\n*          let transaction = await deveryRegistryClient.permissionMarker(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",false)\n*          console.log('transaction address',transaction.hash);\n*      }\n*      catch(err){\n*          if(err.message.indexOf('User denied')){\n*               console.log('The user denied the transaction')\n*              //...\n*          }\n*\n*      ///handle other exceptions here\n*      }\n*\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string} marker The marker account whose permission will be set\n* @param {bool} permission permission value to the target markes\n* @param {TransactionOptions} [overrideOptions] the account index inside the appAccounts array\n* @returns {Promise.<Transaction>} a promise that if resolved returns an transaction or raise an error in case\n*/","meta":{"range":[55988,56204],"filename":"DeveryRegistry.js","lineno":1573,"columnno":2,"path":"/devery","code":{"id":"astnode100001411","name":"DeveryRegistry#permissionMarker","type":"MethodDefinition","paramnames":["marker","permission","overrideOptions"]},"vars":{"":null}},"description":"Adds or removes permission from an account to mark items in the blockchain.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n//passing true as param will add the account as marker\ndeveryRegistryClient.permissionMarker(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",true).then(transaction => {\n     console.log('transaction address',transaction.hash);\n     //... other stuff\n}).catch(err => {\n     if(err.message.indexOf('User denied')){\n         console.log('The user denied the transaction')\n         //...\n     }\n\n     ///handle other exceptions here\n\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         //passing false as param will remove the account as marker\n         let transaction = await deveryRegistryClient.permissionMarker(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",false)\n         console.log('transaction address',transaction.hash);\n     }\n     catch(err){\n         if(err.message.indexOf('User denied')){\n              console.log('The user denied the transaction')\n             //...\n         }\n\n     ///handle other exceptions here\n     }\n\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"The marker account whose permission will be set","name":"marker"},{"type":{"names":["bool"]},"description":"permission value to the target markes","name":"permission"},{"type":{"names":["TransactionOptions"]},"optional":true,"description":"the account index inside the appAccounts array","name":"overrideOptions"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case"}],"name":"permissionMarker","longname":"DeveryRegistry#permissionMarker","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Compute item hash from the public key. You will need this hash to mark your products.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* //passing true as param will add the account as marker\n* deveryRegistryClient.addressHash(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\").then(hash => {\n*      // use the hash to mark the item\n*      //... other stuff\n* })\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string} marker The marker account whose permission will be set\n* @returns {Promise.<Transaction>} a promise that if resolved returns an transaction or raise an error in case\n*/","meta":{"range":[57084,57216],"filename":"DeveryRegistry.js","lineno":1604,"columnno":2,"path":"/devery","code":{"id":"astnode100001438","name":"DeveryRegistry#addressHash","type":"MethodDefinition","paramnames":["item"]},"vars":{"":null}},"description":"Compute item hash from the public key. You will need this hash to mark your products.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n//passing true as param will add the account as marker\ndeveryRegistryClient.addressHash(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\").then(hash => {\n     // use the hash to mark the item\n     //... other stuff\n})\n\n\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"The marker account whose permission will be set","name":"marker"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case"}],"name":"addressHash","longname":"DeveryRegistry#addressHash","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Marks an item in the blockchain. *** you need to pre calculate the item hash before calling this method***\n*\n*  ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* //passing true as param will add the account as marker\n* deveryRegistryClient.mark(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"0x873306090abaB3A6e1400e9345bC60c78a8BEt87\").then(transaction => {\n*      console.log('transaction address',transaction.hash);\n*      //... other stuff\n* }).catch(err => {\n*      if(err.message.indexOf('User denied')){\n*          console.log('The user denied the transaction')\n*          //...\n*      }\n*\n*      ///handle other exceptions here\n*\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*      try{\n*          //passing false as param will remove the account as marker\n*          let transaction = await deveryRegistryClient.mark(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"0x873306090abaB3A6e1400e9345bC60c78a8BEt87\")\n*          console.log('transaction address',transaction.hash);\n*      }\n*      catch(err){\n*          if(err.message.indexOf('User denied')){\n*               console.log('The user denied the transaction')\n*              //...\n*          }\n*\n*      ///handle other exceptions here\n*      }\n*\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string} productAccount The marker account whose permission will be set\n* @param {string} itemHash permission value to the target markes\n* @param {TransactionOptions} [overrideOptions] the account index inside the appAccounts array\n* @returns {Promise.<Transaction>} a promise that if resolved returns an transaction or raise an error in case\n*/","meta":{"range":[59266,59470],"filename":"DeveryRegistry.js","lineno":1662,"columnno":2,"path":"/devery","code":{"id":"astnode100001459","name":"DeveryRegistry#mark","type":"MethodDefinition","paramnames":["productAccount","itemHash","overrideOptions"]},"vars":{"":null}},"description":"Marks an item in the blockchain. *** you need to pre calculate the item hash before calling this method***\n\n ***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n//passing true as param will add the account as marker\ndeveryRegistryClient.mark(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"0x873306090abaB3A6e1400e9345bC60c78a8BEt87\").then(transaction => {\n     console.log('transaction address',transaction.hash);\n     //... other stuff\n}).catch(err => {\n     if(err.message.indexOf('User denied')){\n         console.log('The user denied the transaction')\n         //...\n     }\n\n     ///handle other exceptions here\n\n})\n\n\n//or with the async syntax\n\nasync function(){\n     try{\n         //passing false as param will remove the account as marker\n         let transaction = await deveryRegistryClient.mark(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"0x873306090abaB3A6e1400e9345bC60c78a8BEt87\")\n         console.log('transaction address',transaction.hash);\n     }\n     catch(err){\n         if(err.message.indexOf('User denied')){\n              console.log('The user denied the transaction')\n             //...\n         }\n\n     ///handle other exceptions here\n     }\n\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"The marker account whose permission will be set","name":"productAccount"},{"type":{"names":["string"]},"description":"permission value to the target markes","name":"itemHash"},{"type":{"names":["TransactionOptions"]},"optional":true,"description":"the account index inside the appAccounts array","name":"overrideOptions"}],"returns":[{"type":{"names":["Promise.<Transaction>"]},"description":"a promise that if resolved returns an transaction or raise an error in case"}],"name":"mark","longname":"DeveryRegistry#mark","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n*\n*\n* Check if a given marked item exists in the blockchain and return a {@link MarkResult} containing information about\n* the product.\n*\n* ***Usage example:***\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n*\n* //passing true as param will add the account as marker\n* deveryRegistryClient.check(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\").then(item => {\n*      console.log('product brand',item.brandAccount);\n*      //... other stuff\n* })\n*\n*\n* //or with the async syntax\n*\n* async function(){\n*          //passing false as param will remove the account as marker\n*          let item = await deveryRegistryClient.check(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\")\n*          console.log('product brand',item.brandAccount);\n*\n*\n* }\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {string} productAccount The product account address in the blockchain.\n* @returns {Promise.<MarkResult>} a promise that if resolved returns an transaction or raise an error in case\n*/","meta":{"range":[61562,61682],"filename":"DeveryRegistry.js","lineno":1717,"columnno":2,"path":"/devery","code":{"id":"astnode100001486","name":"DeveryRegistry#check","type":"MethodDefinition","paramnames":["item"]},"vars":{"":null}},"description":"Check if a given marked item exists in the blockchain and return a {@link MarkResult} containing information about\nthe product.\n\n***Usage example:***\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n\n//passing true as param will add the account as marker\ndeveryRegistryClient.check(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\").then(item => {\n     console.log('product brand',item.brandAccount);\n     //... other stuff\n})\n\n\n//or with the async syntax\n\nasync function(){\n         //passing false as param will remove the account as marker\n         let item = await deveryRegistryClient.check(\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\")\n         console.log('product brand',item.brandAccount);\n\n\n}\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["string"]},"description":"The product account address in the blockchain.","name":"productAccount"}],"returns":[{"type":{"names":["Promise.<MarkResult>"]},"description":"a promise that if resolved returns an transaction or raise an error in case"}],"name":"check","longname":"DeveryRegistry#check","kind":"function","memberof":"DeveryRegistry","scope":"instance","async":true},{"comment":"/**\n*\n* Listener to productUpdated events, this event triggers whenever a new devery app is created in the blockchain\n* please note that ProductUpdatedEventListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove am AppAddedEventListener, just call this function passing undefined\n* as param.\n*\n* ***Usage example:***\n*\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n* //now you can use it\n*\n*\n*\n* deveryRegistryClient.setProductUpdatedEventListener((brandAccount,appAccount,active) => {\n*      //whenever an app created we will log it to the console\n*      console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* deveryRegistryClient.setProductUpdatedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n*\n*\n* deveryRegistryClient.setProductUpdatedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {ProductEventCallback} callback the callback that will be executed whenever and ProductUpdated event is\n* triggered\n*/","meta":{"range":[63148,63253],"filename":"DeveryRegistry.js","lineno":1762,"columnno":2,"path":"/devery","code":{"id":"astnode100001507","name":"DeveryRegistry#setPermissionedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to productUpdated events, this event triggers whenever a new devery app is created in the blockchain\nplease note that ProductUpdatedEventListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove am AppAddedEventListener, just call this function passing undefined\nas param.\n\n***Usage example:***\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n//now you can use it\n\n\n\ndeveryRegistryClient.setProductUpdatedEventListener((brandAccount,appAccount,active) => {\n     //whenever an app created we will log it to the console\n     console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\ndeveryRegistryClient.setProductUpdatedEventListener(undefined)\n\n//or that is equivalent to the above call\n\n\n\ndeveryRegistryClient.setProductUpdatedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["ProductEventCallback"]},"description":"the callback that will be executed whenever and ProductUpdated event is\ntriggered","name":"callback"}],"name":"setPermissionedEventListener","longname":"DeveryRegistry#setPermissionedEventListener","kind":"function","memberof":"DeveryRegistry","scope":"instance"},{"comment":"/**\n*\n* Listener to productUpdated events, this event triggers whenever a new devery app is created in the blockchain\n* please note that ProductUpdatedEventListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove am AppAddedEventListener, just call this function passing undefined\n* as param.\n*\n* ***Usage example:***\n*\n* ```\n* //first you need to get a {@link DeveryRegistry} instance\n* let deveryRegistryClient = new DeveryRegistry();\n* //now you can use it\n*\n*\n*\n* deveryRegistryClient.setProductUpdatedEventListener((brandAccount,appAccount,active) => {\n*      //whenever an app created we will log it to the console\n*      console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* deveryRegistryClient.setProductUpdatedEventListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n*\n*\n* deveryRegistryClient.setProductUpdatedEventListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.\n*\n* @param {ProductEventCallback} callback the callback that will be executed whenever and ProductUpdated event is\n* triggered\n*/","meta":{"range":[64719,64812],"filename":"DeveryRegistry.js","lineno":1806,"columnno":2,"path":"/devery","code":{"id":"astnode100001520","name":"DeveryRegistry#setMarkedEventListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to productUpdated events, this event triggers whenever a new devery app is created in the blockchain\nplease note that ProductUpdatedEventListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove am AppAddedEventListener, just call this function passing undefined\nas param.\n\n***Usage example:***\n\n```\n//first you need to get a {@link DeveryRegistry} instance\nlet deveryRegistryClient = new DeveryRegistry();\n//now you can use it\n\n\n\ndeveryRegistryClient.setProductUpdatedEventListener((brandAccount,appAccount,active) => {\n     //whenever an app created we will log it to the console\n     console.log(`a brand has been updated ${brandAccount} - ${appAccount} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\ndeveryRegistryClient.setProductUpdatedEventListener(undefined)\n\n//or that is equivalent to the above call\n\n\n\ndeveryRegistryClient.setProductUpdatedEventListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryRegistry|DeveryRegistry instance click here}.","params":[{"type":{"names":["ProductEventCallback"]},"description":"the callback that will be executed whenever and ProductUpdated event is\ntriggered","name":"callback"}],"name":"setMarkedEventListener","longname":"DeveryRegistry#setMarkedEventListener","kind":"function","memberof":"DeveryRegistry","scope":"instance"},{"comment":"","meta":{"range":[68,134],"filename":"EveToken.js","lineno":3,"columnno":6,"path":"/devery","code":{"id":"astnode100001542","name":"eveTokenArtifact","type":"CallExpression","value":""}},"undocumented":true,"name":"eveTokenArtifact","longname":"eveTokenArtifact","kind":"constant","scope":"global","params":[]},{"comment":"","meta":{"range":[142,168],"filename":"EveToken.js","lineno":4,"columnno":6,"path":"/devery","code":{"id":"astnode100001548","name":"ethers","type":"CallExpression","value":""}},"undocumented":true,"name":"ethers","longname":"ethers","kind":"constant","scope":"global","params":[]},{"comment":"/**\n*\n* Main class to deal with the owned smart contract interface and related operations,\n* you can use it to check the current contract owner and list to ownership change related\n* events\n*\n* @version 2\n* @extends AbstractDeverySmartContract\n*/","meta":{"range":[427,7723],"filename":"EveToken.js","lineno":16,"columnno":0,"path":"/devery","code":{"id":"astnode100001553","name":"EveToken","type":"ClassDeclaration","paramnames":["options"]}},"classdesc":"Main class to deal with the owned smart contract interface and related operations,\nyou can use it to check the current contract owner and list to ownership change related\nevents","version":"2","augments":["AbstractDeverySmartContract"],"name":"EveToken","longname":"EveToken","kind":"class","scope":"global","description":"Creates a new instansce of EveToken.\n```\n//creates a eveTokenClient with the default params\nlet deveryRegistryClient = new EveToken();\n\n//creates a deveryRegistryClient pointing to a custom address\nlet deveryRegistryClient = new EveToken({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n\n```","params":[{"type":{"names":["ClientOptions"]},"description":"network connection options","name":"options"}]},{"comment":"/**\n*\n* Creates a new instansce of EveToken.\n*```\n* //creates a eveTokenClient with the default params\n* let deveryRegistryClient = new EveToken();\n*\n* //creates a deveryRegistryClient pointing to a custom address\n* let deveryRegistryClient = new EveToken({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n*\n* ```\n*\n* @param {ClientOptions} options network connection options\n*\n*/","meta":{"range":[936,1927],"filename":"EveToken.js","lineno":32,"columnno":2,"path":"/devery","code":{"id":"astnode100001557","name":"EveToken","type":"MethodDefinition","paramnames":["options"]},"vars":{"":null}},"description":"Creates a new instansce of EveToken.\n```\n//creates a eveTokenClient with the default params\nlet deveryRegistryClient = new EveToken();\n\n//creates a deveryRegistryClient pointing to a custom address\nlet deveryRegistryClient = new EveToken({address:'0xf17f52151EbEF6C7334FAD080c5704DAAA16b732'});\n\n```","params":[{"type":{"names":["ClientOptions"]},"description":"network connection options","name":"options"}],"name":"EveToken","longname":"EveToken","kind":"class","scope":"global","undocumented":true},{"comment":"/**\n*\n* Checks the total existing EVE supply.\n*\n*\n* @returns {Promise.<BigNumener>} a promisse that resolves to a bigNumber containing the total circulating supply\n* of the current token\n*/","meta":{"range":[2159,2267],"filename":"EveToken.js","lineno":80,"columnno":2,"path":"/devery","code":{"id":"astnode100001685","name":"EveToken#totalSupply","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Checks the total existing EVE supply.","returns":[{"type":{"names":["Promise.<BigNumener>"]},"description":"a promisse that resolves to a bigNumber containing the total circulating supply\nof the current token"}],"name":"totalSupply","longname":"EveToken#totalSupply","kind":"function","memberof":"EveToken","scope":"instance","params":[],"async":true},{"comment":"/**\n*\n* Checks the EVE balance of a given account.\n*\n* @param account  account whose balance is being inquired\n* @returns {Promise.<*>} a promisse that resolves to the current balance of\n* the inquired account\n*/","meta":{"range":[2521,2639],"filename":"EveToken.js","lineno":93,"columnno":2,"path":"/devery","code":{"id":"astnode100001701","name":"EveToken#balanceOf","type":"MethodDefinition","paramnames":["account"]},"vars":{"":null}},"description":"Checks the EVE balance of a given account.","params":[{"description":"account whose balance is being inquired","name":"account"}],"returns":[{"type":{"names":["Promise.<*>"]},"description":"a promisse that resolves to the current balance of\nthe inquired account"}],"name":"balanceOf","longname":"EveToken#balanceOf","kind":"function","memberof":"EveToken","scope":"instance","async":true},{"comment":"/**\n*\n*  gives the 3rd party the right to facilitate a transaction with the owners token.\n*  please note that alowance will not transfer tokens to the 3rd party but instead give him\n*  permission to facilitate transactions on your behalf.\n*\n* @param account  account whose balance is being inquired\n* @returns {Promise.<*>}\n*/","meta":{"range":[3012,3203],"filename":"EveToken.js","lineno":107,"columnno":2,"path":"/devery","code":{"id":"astnode100001719","name":"EveToken#allowance","type":"MethodDefinition","paramnames":["tokenOwner","spender","overrideOptions"]},"vars":{"":null}},"description":"gives the 3rd party the right to facilitate a transaction with the owners token.\n please note that alowance will not transfer tokens to the 3rd party but instead give him\n permission to facilitate transactions on your behalf.","params":[{"description":"account whose balance is being inquired","name":"account"}],"returns":[{"type":{"names":["Promise.<*>"]}}],"name":"allowance","longname":"EveToken#allowance","kind":"function","memberof":"EveToken","scope":"instance","async":true},{"comment":"/**\n*\n* Transfer EVE tokens from the current account to any other account\n*\n* @param toAdress  address that will receive the tokens\n* @param total quantity of tokens being sent\n* @returns {Promise.<*>} a promisse that resolves to the transaction receipt\n*/","meta":{"range":[3501,3682],"filename":"EveToken.js","lineno":120,"columnno":2,"path":"/devery","code":{"id":"astnode100001746","name":"EveToken#transfer","type":"MethodDefinition","paramnames":["toAdress","total","overrideOptions"]},"vars":{"":null}},"description":"Transfer EVE tokens from the current account to any other account","params":[{"description":"address that will receive the tokens","name":"toAdress"},{"description":"quantity of tokens being sent","name":"total"}],"returns":[{"type":{"names":["Promise.<*>"]},"description":"a promisse that resolves to the transaction receipt"}],"name":"transfer","longname":"EveToken#transfer","kind":"function","memberof":"EveToken","scope":"instance","async":true},{"comment":"/**\n*\n* Transfer EVE tokens from a specific account to any other account, you need to have an allowance permission\n* to be able to do this transaction.\n*\n* @param toAdress  address that will receive the tokens\n* @param total quantity of tokens being sent\n* @returns {Promise.<*>} a promisse that resolves to the transaction receipt\n*/","meta":{"range":[4063,4254],"filename":"EveToken.js","lineno":134,"columnno":2,"path":"/devery","code":{"id":"astnode100001773","name":"EveToken#transferFrom","type":"MethodDefinition","paramnames":["from","to","tokens","overrideOptions"]},"vars":{"":null}},"description":"Transfer EVE tokens from a specific account to any other account, you need to have an allowance permission\nto be able to do this transaction.","params":[{"description":"address that will receive the tokens","name":"toAdress"},{"description":"quantity of tokens being sent","name":"total"}],"returns":[{"type":{"names":["Promise.<*>"]},"description":"a promisse that resolves to the transaction receipt"}],"name":"transferFrom","longname":"EveToken#transferFrom","kind":"function","memberof":"EveToken","scope":"instance","async":true},{"comment":"/**\n*\n* Listener to AppAdded events, this event triggers whenever a new devery app is created in the blockchain\n* please note that AppAddedEventListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove a AppAddedEventListener, just call this function passing undefined\n* as param.\n*\n* ```\n* //first you need to get a {@link DeveryOwned} instance\n* let deveryRegistryClient = new DeveryRegistry();\n* //now you can use it\n*\n*\n*\n* deveryOwnedClient.setApprovalListener((appAccount,appName,feeAccount,fee,active) => {\n*      //whenever an app created we will log it to the console\n*      console.log(`new app created ${appAccount} - ${appName} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* deveryOwnedClient.setApprovalListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n* deveryOwnedClient.setApprovalListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}.\n*\n* @param {OwnershipEventCallback} callback the callback that will be executed whenever and OwnershipTransferred event is\n* triggered\n*/","meta":{"range":[5914,6000],"filename":"EveToken.js","lineno":188,"columnno":2,"path":"/devery","code":{"id":"astnode100001802","name":"EveToken#setApprovalListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to AppAdded events, this event triggers whenever a new devery app is created in the blockchain\nplease note that AppAddedEventListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove a AppAddedEventListener, just call this function passing undefined\nas param.\n\n```\n//first you need to get a {@link DeveryOwned} instance\nlet deveryRegistryClient = new DeveryRegistry();\n//now you can use it\n\n\n\ndeveryOwnedClient.setApprovalListener((appAccount,appName,feeAccount,fee,active) => {\n     //whenever an app created we will log it to the console\n     console.log(`new app created ${appAccount} - ${appName} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\ndeveryOwnedClient.setApprovalListener(undefined)\n\n//or that is equivalent to the above call\n\ndeveryOwnedClient.setApprovalListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}.","params":[{"type":{"names":["OwnershipEventCallback"]},"description":"the callback that will be executed whenever and OwnershipTransferred event is\ntriggered","name":"callback"}],"name":"setApprovalListener","longname":"EveToken#setApprovalListener","kind":"function","memberof":"EveToken","scope":"instance"},{"comment":"/**\n*\n* Listener to AppAdded events, this event triggers whenever a new devery app is created in the blockchain\n* please note that AppAddedEventListener do not stack, this means that whenever you set one you are\n* removing the last one. If you want to remove a AppAddedEventListener, just call this function passing undefined\n* as param.\n*\n* ```\n* //first you need to get a {@link EveToken} instance\n* let eveTokenClient = new EveToken();\n* //now you can use it\n*\n*\n*\n* eveTokenClient.setTransferListener((appAccount,appName,feeAccount,fee,active) => {\n*      //whenever an app created we will log it to the console\n*      console.log(`new app created ${appAccount} - ${appName} ...`);\n* })\n*\n* //if you want to remove the listener you can simply pass undefined as parameter\n*\n* eveTokenClient.setTransferListener(undefined)\n*\n* //or that is equivalent to the above call\n*\n* eveTokenClient.setTransferListener()\n*\n*\n*\n* ```\n*\n* for more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}.\n*\n* @param {OwnershipEventCallback} callback the callback that will be executed whenever and OwnershipTransferred event is\n* triggered\n*/","meta":{"range":[7635,7721],"filename":"EveToken.js","lineno":241,"columnno":2,"path":"/devery","code":{"id":"astnode100001815","name":"EveToken#setTransferListener","type":"MethodDefinition","paramnames":["callback"]},"vars":{"":null}},"description":"Listener to AppAdded events, this event triggers whenever a new devery app is created in the blockchain\nplease note that AppAddedEventListener do not stack, this means that whenever you set one you are\nremoving the last one. If you want to remove a AppAddedEventListener, just call this function passing undefined\nas param.\n\n```\n//first you need to get a {@link EveToken} instance\nlet eveTokenClient = new EveToken();\n//now you can use it\n\n\n\neveTokenClient.setTransferListener((appAccount,appName,feeAccount,fee,active) => {\n     //whenever an app created we will log it to the console\n     console.log(`new app created ${appAccount} - ${appName} ...`);\n})\n\n//if you want to remove the listener you can simply pass undefined as parameter\n\neveTokenClient.setTransferListener(undefined)\n\n//or that is equivalent to the above call\n\neveTokenClient.setTransferListener()\n\n\n\n```\n\nfor more info about how to get a {@link DeveryOwned|DeveryOwned instance click here}.","params":[{"type":{"names":["OwnershipEventCallback"]},"description":"the callback that will be executed whenever and OwnershipTransferred event is\ntriggered","name":"callback"}],"name":"setTransferListener","longname":"EveToken#setTransferListener","kind":"function","memberof":"EveToken","scope":"instance"},{"comment":"","meta":{"range":[6,37],"filename":"Utils.js","lineno":1,"columnno":6,"path":"/devery","code":{"id":"astnode100001833","name":"CryptoJS","type":"CallExpression","value":""}},"undocumented":true,"name":"CryptoJS","longname":"CryptoJS","kind":"constant","scope":"global","params":[]},{"comment":"","meta":{"range":[45,77],"filename":"Utils.js","lineno":2,"columnno":6,"path":"/devery","code":{"id":"astnode100001839","name":"sha3","type":"CallExpression","value":""}},"undocumented":true,"name":"sha3","longname":"sha3","kind":"constant","scope":"global","params":[]},{"comment":"","meta":{"range":[85,111],"filename":"Utils.js","lineno":3,"columnno":6,"path":"/devery","code":{"id":"astnode100001845","name":"ethers","type":"CallExpression","value":""}},"undocumented":true,"name":"ethers","longname":"ethers","kind":"constant","scope":"global","params":[]},{"comment":"/**\n*\n* This class contains common utitlies methods, you don't need an instance as all the methods here are\n* static methods\n*\n* @version 1\n*\n*/","meta":{"range":[266,2208],"filename":"Utils.js","lineno":13,"columnno":0,"path":"/devery","code":{"id":"astnode100001850","name":"Utils","type":"ClassDeclaration","paramnames":[]}},"classdesc":"This class contains common utitlies methods, you don't need an instance as all the methods here are\nstatic methods","version":"1","name":"Utils","longname":"Utils","kind":"class","scope":"global"},{"comment":"/**\n* Checks if the given string is an address\n*\n*\n* @param {String} address the given HEX adress\n* @return {Boolean}\n*/","meta":{"range":[435,855],"filename":"Utils.js","lineno":21,"columnno":2,"path":"/devery","code":{"id":"astnode100001853","name":"Utils.isAddress","type":"MethodDefinition","paramnames":["address"]},"vars":{"":null}},"description":"Checks if the given string is an address","params":[{"type":{"names":["String"]},"description":"the given HEX adress","name":"address"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isAddress","longname":"Utils.isAddress","kind":"function","memberof":"Utils","scope":"static"},{"comment":"/**\n* Checks if the given string is a checksummed address\n*\n* @param {String} address the given HEX adress\n* @return {Boolean}\n*/","meta":{"range":[1016,1529],"filename":"Utils.js","lineno":39,"columnno":2,"path":"/devery","code":{"id":"astnode100001889","name":"Utils.isChecksumAddress","type":"MethodDefinition","paramnames":["address"]},"vars":{"":null}},"description":"Checks if the given string is a checksummed address","params":[{"type":{"names":["String"]},"description":"the given HEX adress","name":"address"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isChecksumAddress","longname":"Utils.isChecksumAddress","kind":"function","memberof":"Utils","scope":"static"},{"comment":"/**\n* Generates a random ethereum  address\n*\n* @return {String} a random eth address\n*/","meta":{"range":[1643,1723],"filename":"Utils.js","lineno":58,"columnno":2,"path":"/devery","code":{"id":"astnode100001971","name":"Utils.getRandomAddress","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Generates a random ethereum  address","returns":[{"type":{"names":["String"]},"description":"a random eth address"}],"name":"getRandomAddress","longname":"Utils.getRandomAddress","kind":"function","memberof":"Utils","scope":"static","params":[]},{"comment":"/**\n*\n* calculates the sha3 of a given value\n*\n* @param value - value to have it's sha3 calculated\n* @param options - calculation options\n*/","meta":{"range":[1901,2206],"filename":"Utils.js","lineno":70,"columnno":2,"path":"/devery","code":{"id":"astnode100001984","name":"Utils.sha3","type":"MethodDefinition","paramnames":["value","options"]},"vars":{"":null}},"description":"calculates the sha3 of a given value","params":[{"description":"value to have it's sha3 calculated","name":"value"},{"description":"calculation options","name":"options"}],"name":"sha3","longname":"Utils.sha3","kind":"function","memberof":"Utils","scope":"static"},{"comment":"/**\n*\n* you can use this method to check the current signer wallet address\n*\n* @returns {*} - the current signer address\n*/","meta":{"range":[3551,3624],"filename":"AbstractSmartContract.js","lineno":105,"columnno":2,"path":"/devery","code":{"id":"astnode100000397","name":"AbstractSmartContract#getSignerAddress","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"you can use this method to check the current signer wallet address","returns":[{"type":{"names":["*"]},"description":"- the current signer address"}],"name":"getSignerAddress","longname":"AbstractDeverySmartContract#getSignerAddress","kind":"function","memberof":"AbstractDeverySmartContract","scope":"instance","params":[],"inherits":"AbstractSmartContract#getSignerAddress","inherited":true},{"comment":"/**\n* returns the internal signer or provider, this method needs to be used with caution\n* as it exposes internals. So unless you know what you are doing it's better to avoid using it.\n*\n* @returns {*} - the current provider or signer\n*/","meta":{"range":[3883,3938],"filename":"AbstractSmartContract.js","lineno":115,"columnno":2,"path":"/devery","code":{"id":"astnode100000408","name":"AbstractSmartContract#getProvider","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"returns the internal signer or provider, this method needs to be used with caution\nas it exposes internals. So unless you know what you are doing it's better to avoid using it.","returns":[{"type":{"names":["*"]},"description":"- the current provider or signer"}],"name":"getProvider","longname":"AbstractDeverySmartContract#getProvider","kind":"function","memberof":"AbstractDeverySmartContract","scope":"instance","params":[],"inherits":"AbstractSmartContract#getProvider","inherited":true},{"comment":"/**\n*\n* you can use this method to check the current signer wallet address\n*\n* @returns {*} - the current signer address\n*/","meta":{"range":[3551,3624],"filename":"AbstractSmartContract.js","lineno":105,"columnno":2,"path":"/devery","code":{"id":"astnode100000397","name":"AbstractSmartContract#getSignerAddress","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"you can use this method to check the current signer wallet address","returns":[{"type":{"names":["*"]},"description":"- the current signer address"}],"name":"getSignerAddress","longname":"DeveryAdmined#getSignerAddress","kind":"function","memberof":"DeveryAdmined","scope":"instance","params":[],"inherits":"AbstractSmartContract#getSignerAddress","inherited":true},{"comment":"/**\n* returns the internal signer or provider, this method needs to be used with caution\n* as it exposes internals. So unless you know what you are doing it's better to avoid using it.\n*\n* @returns {*} - the current provider or signer\n*/","meta":{"range":[3883,3938],"filename":"AbstractSmartContract.js","lineno":115,"columnno":2,"path":"/devery","code":{"id":"astnode100000408","name":"AbstractSmartContract#getProvider","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"returns the internal signer or provider, this method needs to be used with caution\nas it exposes internals. So unless you know what you are doing it's better to avoid using it.","returns":[{"type":{"names":["*"]},"description":"- the current provider or signer"}],"name":"getProvider","longname":"DeveryAdmined#getProvider","kind":"function","memberof":"DeveryAdmined","scope":"instance","params":[],"inherits":"AbstractSmartContract#getProvider","inherited":true},{"comment":"/**\n*\n* you can use this method to check the current signer wallet address\n*\n* @returns {*} - the current signer address\n*/","meta":{"range":[3551,3624],"filename":"AbstractSmartContract.js","lineno":105,"columnno":2,"path":"/devery","code":{"id":"astnode100000397","name":"AbstractSmartContract#getSignerAddress","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"you can use this method to check the current signer wallet address","returns":[{"type":{"names":["*"]},"description":"- the current signer address"}],"name":"getSignerAddress","longname":"DeveryOwned#getSignerAddress","kind":"function","memberof":"DeveryOwned","scope":"instance","params":[],"inherits":"AbstractSmartContract#getSignerAddress","inherited":true},{"comment":"/**\n* returns the internal signer or provider, this method needs to be used with caution\n* as it exposes internals. So unless you know what you are doing it's better to avoid using it.\n*\n* @returns {*} - the current provider or signer\n*/","meta":{"range":[3883,3938],"filename":"AbstractSmartContract.js","lineno":115,"columnno":2,"path":"/devery","code":{"id":"astnode100000408","name":"AbstractSmartContract#getProvider","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"returns the internal signer or provider, this method needs to be used with caution\nas it exposes internals. So unless you know what you are doing it's better to avoid using it.","returns":[{"type":{"names":["*"]},"description":"- the current provider or signer"}],"name":"getProvider","longname":"DeveryOwned#getProvider","kind":"function","memberof":"DeveryOwned","scope":"instance","params":[],"inherits":"AbstractSmartContract#getProvider","inherited":true},{"comment":"/**\n*\n* you can use this method to check the current signer wallet address\n*\n* @returns {*} - the current signer address\n*/","meta":{"range":[3551,3624],"filename":"AbstractSmartContract.js","lineno":105,"columnno":2,"path":"/devery","code":{"id":"astnode100000397","name":"AbstractSmartContract#getSignerAddress","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"you can use this method to check the current signer wallet address","returns":[{"type":{"names":["*"]},"description":"- the current signer address"}],"name":"getSignerAddress","longname":"DeveryRegistry#getSignerAddress","kind":"function","memberof":"DeveryRegistry","scope":"instance","params":[],"inherits":"AbstractSmartContract#getSignerAddress","inherited":true},{"comment":"/**\n* returns the internal signer or provider, this method needs to be used with caution\n* as it exposes internals. So unless you know what you are doing it's better to avoid using it.\n*\n* @returns {*} - the current provider or signer\n*/","meta":{"range":[3883,3938],"filename":"AbstractSmartContract.js","lineno":115,"columnno":2,"path":"/devery","code":{"id":"astnode100000408","name":"AbstractSmartContract#getProvider","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"returns the internal signer or provider, this method needs to be used with caution\nas it exposes internals. So unless you know what you are doing it's better to avoid using it.","returns":[{"type":{"names":["*"]},"description":"- the current provider or signer"}],"name":"getProvider","longname":"DeveryRegistry#getProvider","kind":"function","memberof":"DeveryRegistry","scope":"instance","params":[],"inherits":"AbstractSmartContract#getProvider","inherited":true},{"comment":"/**\n*\n* you can use this method to check the current signer wallet address\n*\n* @returns {*} - the current signer address\n*/","meta":{"range":[3551,3624],"filename":"AbstractSmartContract.js","lineno":105,"columnno":2,"path":"/devery","code":{"id":"astnode100000397","name":"AbstractSmartContract#getSignerAddress","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"you can use this method to check the current signer wallet address","returns":[{"type":{"names":["*"]},"description":"- the current signer address"}],"name":"getSignerAddress","longname":"EveToken#getSignerAddress","kind":"function","memberof":"EveToken","scope":"instance","params":[],"inherits":"AbstractSmartContract#getSignerAddress","inherited":true},{"comment":"/**\n* returns the internal signer or provider, this method needs to be used with caution\n* as it exposes internals. So unless you know what you are doing it's better to avoid using it.\n*\n* @returns {*} - the current provider or signer\n*/","meta":{"range":[3883,3938],"filename":"AbstractSmartContract.js","lineno":115,"columnno":2,"path":"/devery","code":{"id":"astnode100000408","name":"AbstractSmartContract#getProvider","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"returns the internal signer or provider, this method needs to be used with caution\nas it exposes internals. So unless you know what you are doing it's better to avoid using it.","returns":[{"type":{"names":["*"]},"description":"- the current provider or signer"}],"name":"getProvider","longname":"EveToken#getProvider","kind":"function","memberof":"EveToken","scope":"instance","params":[],"inherits":"AbstractSmartContract#getProvider","inherited":true}]}